// model-header.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideo.h
 *
 * The video resource groups video-related data items into a single structure.  If a driveItem has a non-null video facet, the item represents a video file. The properties of the video resource are populated by extracting metadata from the file. 
 */

#ifndef OAIVideo_H
#define OAIVideo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {


class OAIVideoPrivate;

class OAIVideo : public OAIObject {
public:
    OAIVideo();
    OAIVideo(const OAIVideo &other);
    OAIVideo(QString json);
    ~OAIVideo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAudioBitsPerSample() const;
    void setAudioBitsPerSample(const qint32 &audio_bits_per_sample);
    bool is_audio_bits_per_sample_Set() const;
    bool is_audio_bits_per_sample_Valid() const;

    qint32 getAudioChannels() const;
    void setAudioChannels(const qint32 &audio_channels);
    bool is_audio_channels_Set() const;
    bool is_audio_channels_Valid() const;

    QString getAudioFormat() const;
    void setAudioFormat(const QString &audio_format);
    bool is_audio_format_Set() const;
    bool is_audio_format_Valid() const;

    qint32 getAudioSamplesPerSecond() const;
    void setAudioSamplesPerSecond(const qint32 &audio_samples_per_second);
    bool is_audio_samples_per_second_Set() const;
    bool is_audio_samples_per_second_Valid() const;

    qint32 getBitrate() const;
    void setBitrate(const qint32 &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    qint64 getDuration() const;
    void setDuration(const qint64 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getFourCc() const;
    void setFourCc(const QString &four_cc);
    bool is_four_cc_Set() const;
    bool is_four_cc_Valid() const;

    double getFrameRate() const;
    void setFrameRate(const double &frame_rate);
    bool is_frame_rate_Set() const;
    bool is_frame_rate_Valid() const;

    qint32 getHeight() const;
    void setHeight(const qint32 &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    qint32 getWidth() const;
    void setWidth(const qint32 &width);
    bool is_width_Set() const;
    bool is_width_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();
    Q_DECLARE_PRIVATE(OAIVideo)
    QSharedPointer<OAIVideoPrivate> d_ptr;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideo)

#endif // OAIVideo_H
