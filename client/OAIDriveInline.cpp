/**
 * Open Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriveInline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDriveInline::OAIDriveInline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDriveInline::OAIDriveInline() {
    this->initializeModel();
}

OAIDriveInline::~OAIDriveInline() {}

void OAIDriveInline::initializeModel() {

    m_drive_type_isSet = false;
    m_drive_type_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;
}

void OAIDriveInline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriveInline::fromJsonObject(QJsonObject json) {

    m_drive_type_isValid = ::OpenAPI::fromJsonValue(drive_type, json[QString("driveType")]);
    m_drive_type_isSet = !json[QString("driveType")].isNull() && m_drive_type_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;
}

QString OAIDriveInline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDriveInline::asJsonObject() const {
    QJsonObject obj;
    if (m_drive_type_isSet) {
        obj.insert(QString("driveType"), ::OpenAPI::toJsonValue(drive_type));
    }
    if (owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(owner));
    }
    if (quota.isSet()) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(quota));
    }
    if (items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(items));
    }
    if (root.isSet()) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(root));
    }
    return obj;
}

QString OAIDriveInline::getDriveType() const {
    return drive_type;
}
void OAIDriveInline::setDriveType(const QString &drive_type) {
    this->drive_type = drive_type;
    this->m_drive_type_isSet = true;
}

bool OAIDriveInline::is_drive_type_Set() const{
    return m_drive_type_isSet;
}

bool OAIDriveInline::is_drive_type_Valid() const{
    return m_drive_type_isValid;
}

OAIIdentitySet OAIDriveInline::getOwner() const {
    return owner;
}
void OAIDriveInline::setOwner(const OAIIdentitySet &owner) {
    this->owner = owner;
    this->m_owner_isSet = true;
}

bool OAIDriveInline::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIDriveInline::is_owner_Valid() const{
    return m_owner_isValid;
}

OAIQuota OAIDriveInline::getQuota() const {
    return quota;
}
void OAIDriveInline::setQuota(const OAIQuota &quota) {
    this->quota = quota;
    this->m_quota_isSet = true;
}

bool OAIDriveInline::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIDriveInline::is_quota_Valid() const{
    return m_quota_isValid;
}

QList<OAIDriveItem> OAIDriveInline::getItems() const {
    return items;
}
void OAIDriveInline::setItems(const QList<OAIDriveItem> &items) {
    this->items = items;
    this->m_items_isSet = true;
}

bool OAIDriveInline::is_items_Set() const{
    return m_items_isSet;
}

bool OAIDriveInline::is_items_Valid() const{
    return m_items_isValid;
}

OAIDriveItem OAIDriveInline::getRoot() const {
    return root;
}
void OAIDriveInline::setRoot(const OAIDriveItem &root) {
    this->root = root;
    this->m_root_isSet = true;
}

bool OAIDriveInline::is_root_Set() const{
    return m_root_isSet;
}

bool OAIDriveInline::is_root_Valid() const{
    return m_root_isValid;
}

bool OAIDriveInline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drive_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (quota.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (root.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriveInline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
