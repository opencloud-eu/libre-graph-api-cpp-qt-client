// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.11.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIUserPrivate {
    friend class OAIUser;

     QString id;
     bool id_isSet;
     bool id_isValid;

     QDateTime deleted_date_time;
     bool deleted_date_time_isSet;
     bool deleted_date_time_isValid;

     bool account_enabled;
     bool account_enabled_isSet;
     bool account_enabled_isValid;

     QList<QString> business_phones;
     bool business_phones_isSet;
     bool business_phones_isValid;

     QString city;
     bool city_isSet;
     bool city_isValid;

     QString company_name;
     bool company_name_isSet;
     bool company_name_isValid;

     QString country;
     bool country_isSet;
     bool country_isValid;

     QDateTime created_date_time;
     bool created_date_time_isSet;
     bool created_date_time_isValid;

     QString department;
     bool department_isSet;
     bool department_isValid;

     QString display_name;
     bool display_name_isSet;
     bool display_name_isValid;

     QString fax_number;
     bool fax_number_isSet;
     bool fax_number_isValid;

     QString given_name;
     bool given_name_isSet;
     bool given_name_isValid;

     QDateTime last_password_change_date_time;
     bool last_password_change_date_time_isSet;
     bool last_password_change_date_time_isValid;

     QString legal_age_group_classification;
     bool legal_age_group_classification_isSet;
     bool legal_age_group_classification_isValid;

     QString mail;
     bool mail_isSet;
     bool mail_isValid;

     QString mail_nickname;
     bool mail_nickname_isSet;
     bool mail_nickname_isValid;

     QString mobile_phone;
     bool mobile_phone_isSet;
     bool mobile_phone_isValid;

     QString on_premises_distinguished_name;
     bool on_premises_distinguished_name_isSet;
     bool on_premises_distinguished_name_isValid;

     QString on_premises_domain_name;
     bool on_premises_domain_name_isSet;
     bool on_premises_domain_name_isValid;

     QString on_premises_immutable_id;
     bool on_premises_immutable_id_isSet;
     bool on_premises_immutable_id_isValid;

     bool on_premises_sync_enabled;
     bool on_premises_sync_enabled_isSet;
     bool on_premises_sync_enabled_isValid;

     QDateTime on_premises_last_sync_date_time;
     bool on_premises_last_sync_date_time_isSet;
     bool on_premises_last_sync_date_time_isValid;

     QString on_premises_sam_account_name;
     bool on_premises_sam_account_name_isSet;
     bool on_premises_sam_account_name_isValid;

     QString on_premises_user_principal_name;
     bool on_premises_user_principal_name_isSet;
     bool on_premises_user_principal_name_isValid;

     QString office_location;
     bool office_location_isSet;
     bool office_location_isValid;

     OAIPasswordProfile password_profile;
     bool password_profile_isSet;
     bool password_profile_isValid;

     QString postal_code;
     bool postal_code_isSet;
     bool postal_code_isValid;

     QString preferred_language;
     bool preferred_language_isSet;
     bool preferred_language_isValid;

     QString state;
     bool state_isSet;
     bool state_isValid;

     QString street_address;
     bool street_address_isSet;
     bool street_address_isValid;

     QString surname;
     bool surname_isSet;
     bool surname_isValid;

     QString usage_location;
     bool usage_location_isSet;
     bool usage_location_isValid;

     QString user_principal_name;
     bool user_principal_name_isSet;
     bool user_principal_name_isValid;

     QString user_type;
     bool user_type_isSet;
     bool user_type_isValid;

     QString about_me;
     bool about_me_isSet;
     bool about_me_isValid;

     QDateTime birthday;
     bool birthday_isSet;
     bool birthday_isValid;

     QString preferred_name;
     bool preferred_name_isSet;
     bool preferred_name_isValid;

     OAIDrive drive;
     bool drive_isSet;
     bool drive_isValid;

     QList<OAIDrive> drives;
     bool drives_isSet;
     bool drives_isValid;
};

OAIUser::OAIUser()
    : d_ptr()
{
}

OAIUser::OAIUser(const OAIUser& other)
    : d_ptr(other.d_ptr)
{
}

OAIUser::OAIUser(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIUser::~OAIUser() = default;

void OAIUser::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIUserPrivate{});

        Q_D(OAIUser);


        d->id_isSet = false;
        d->id_isValid = false;

        d->deleted_date_time_isSet = false;
        d->deleted_date_time_isValid = false;

        d->account_enabled_isSet = false;
        d->account_enabled_isValid = false;

        d->business_phones_isSet = false;
        d->business_phones_isValid = false;

        d->city_isSet = false;
        d->city_isValid = false;

        d->company_name_isSet = false;
        d->company_name_isValid = false;

        d->country_isSet = false;
        d->country_isValid = false;

        d->created_date_time_isSet = false;
        d->created_date_time_isValid = false;

        d->department_isSet = false;
        d->department_isValid = false;

        d->display_name_isSet = false;
        d->display_name_isValid = false;

        d->fax_number_isSet = false;
        d->fax_number_isValid = false;

        d->given_name_isSet = false;
        d->given_name_isValid = false;

        d->last_password_change_date_time_isSet = false;
        d->last_password_change_date_time_isValid = false;

        d->legal_age_group_classification_isSet = false;
        d->legal_age_group_classification_isValid = false;

        d->mail_isSet = false;
        d->mail_isValid = false;

        d->mail_nickname_isSet = false;
        d->mail_nickname_isValid = false;

        d->mobile_phone_isSet = false;
        d->mobile_phone_isValid = false;

        d->on_premises_distinguished_name_isSet = false;
        d->on_premises_distinguished_name_isValid = false;

        d->on_premises_domain_name_isSet = false;
        d->on_premises_domain_name_isValid = false;

        d->on_premises_immutable_id_isSet = false;
        d->on_premises_immutable_id_isValid = false;

        d->on_premises_sync_enabled_isSet = false;
        d->on_premises_sync_enabled_isValid = false;

        d->on_premises_last_sync_date_time_isSet = false;
        d->on_premises_last_sync_date_time_isValid = false;

        d->on_premises_sam_account_name_isSet = false;
        d->on_premises_sam_account_name_isValid = false;

        d->on_premises_user_principal_name_isSet = false;
        d->on_premises_user_principal_name_isValid = false;

        d->office_location_isSet = false;
        d->office_location_isValid = false;

        d->password_profile_isSet = false;
        d->password_profile_isValid = false;

        d->postal_code_isSet = false;
        d->postal_code_isValid = false;

        d->preferred_language_isSet = false;
        d->preferred_language_isValid = false;

        d->state_isSet = false;
        d->state_isValid = false;

        d->street_address_isSet = false;
        d->street_address_isValid = false;

        d->surname_isSet = false;
        d->surname_isValid = false;

        d->usage_location_isSet = false;
        d->usage_location_isValid = false;

        d->user_principal_name_isSet = false;
        d->user_principal_name_isValid = false;

        d->user_type_isSet = false;
        d->user_type_isValid = false;

        d->about_me_isSet = false;
        d->about_me_isValid = false;

        d->birthday_isSet = false;
        d->birthday_isValid = false;

        d->preferred_name_isSet = false;
        d->preferred_name_isValid = false;

        d->drive_isSet = false;
        d->drive_isValid = false;

        d->drives_isSet = false;
        d->drives_isValid = false;
    }
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIUser);

    d->id_isValid = ::OpenAPI::fromJsonValue(d->id, json[QString("id")]);
    d->id_isSet = !json[QString("id")].isNull() && d->id_isValid;

    d->deleted_date_time_isValid = ::OpenAPI::fromJsonValue(d->deleted_date_time, json[QString("deletedDateTime")]);
    d->deleted_date_time_isSet = !json[QString("deletedDateTime")].isNull() && d->deleted_date_time_isValid;

    d->account_enabled_isValid = ::OpenAPI::fromJsonValue(d->account_enabled, json[QString("accountEnabled")]);
    d->account_enabled_isSet = !json[QString("accountEnabled")].isNull() && d->account_enabled_isValid;

    d->business_phones_isValid = ::OpenAPI::fromJsonValue(d->business_phones, json[QString("businessPhones")]);
    d->business_phones_isSet = !json[QString("businessPhones")].isNull() && d->business_phones_isValid;

    d->city_isValid = ::OpenAPI::fromJsonValue(d->city, json[QString("city")]);
    d->city_isSet = !json[QString("city")].isNull() && d->city_isValid;

    d->company_name_isValid = ::OpenAPI::fromJsonValue(d->company_name, json[QString("companyName")]);
    d->company_name_isSet = !json[QString("companyName")].isNull() && d->company_name_isValid;

    d->country_isValid = ::OpenAPI::fromJsonValue(d->country, json[QString("country")]);
    d->country_isSet = !json[QString("country")].isNull() && d->country_isValid;

    d->created_date_time_isValid = ::OpenAPI::fromJsonValue(d->created_date_time, json[QString("createdDateTime")]);
    d->created_date_time_isSet = !json[QString("createdDateTime")].isNull() && d->created_date_time_isValid;

    d->department_isValid = ::OpenAPI::fromJsonValue(d->department, json[QString("department")]);
    d->department_isSet = !json[QString("department")].isNull() && d->department_isValid;

    d->display_name_isValid = ::OpenAPI::fromJsonValue(d->display_name, json[QString("displayName")]);
    d->display_name_isSet = !json[QString("displayName")].isNull() && d->display_name_isValid;

    d->fax_number_isValid = ::OpenAPI::fromJsonValue(d->fax_number, json[QString("faxNumber")]);
    d->fax_number_isSet = !json[QString("faxNumber")].isNull() && d->fax_number_isValid;

    d->given_name_isValid = ::OpenAPI::fromJsonValue(d->given_name, json[QString("givenName")]);
    d->given_name_isSet = !json[QString("givenName")].isNull() && d->given_name_isValid;

    d->last_password_change_date_time_isValid = ::OpenAPI::fromJsonValue(d->last_password_change_date_time, json[QString("lastPasswordChangeDateTime")]);
    d->last_password_change_date_time_isSet = !json[QString("lastPasswordChangeDateTime")].isNull() && d->last_password_change_date_time_isValid;

    d->legal_age_group_classification_isValid = ::OpenAPI::fromJsonValue(d->legal_age_group_classification, json[QString("legalAgeGroupClassification")]);
    d->legal_age_group_classification_isSet = !json[QString("legalAgeGroupClassification")].isNull() && d->legal_age_group_classification_isValid;

    d->mail_isValid = ::OpenAPI::fromJsonValue(d->mail, json[QString("mail")]);
    d->mail_isSet = !json[QString("mail")].isNull() && d->mail_isValid;

    d->mail_nickname_isValid = ::OpenAPI::fromJsonValue(d->mail_nickname, json[QString("mailNickname")]);
    d->mail_nickname_isSet = !json[QString("mailNickname")].isNull() && d->mail_nickname_isValid;

    d->mobile_phone_isValid = ::OpenAPI::fromJsonValue(d->mobile_phone, json[QString("mobilePhone")]);
    d->mobile_phone_isSet = !json[QString("mobilePhone")].isNull() && d->mobile_phone_isValid;

    d->on_premises_distinguished_name_isValid = ::OpenAPI::fromJsonValue(d->on_premises_distinguished_name, json[QString("onPremisesDistinguishedName")]);
    d->on_premises_distinguished_name_isSet = !json[QString("onPremisesDistinguishedName")].isNull() && d->on_premises_distinguished_name_isValid;

    d->on_premises_domain_name_isValid = ::OpenAPI::fromJsonValue(d->on_premises_domain_name, json[QString("onPremisesDomainName")]);
    d->on_premises_domain_name_isSet = !json[QString("onPremisesDomainName")].isNull() && d->on_premises_domain_name_isValid;

    d->on_premises_immutable_id_isValid = ::OpenAPI::fromJsonValue(d->on_premises_immutable_id, json[QString("onPremisesImmutableId")]);
    d->on_premises_immutable_id_isSet = !json[QString("onPremisesImmutableId")].isNull() && d->on_premises_immutable_id_isValid;

    d->on_premises_sync_enabled_isValid = ::OpenAPI::fromJsonValue(d->on_premises_sync_enabled, json[QString("onPremisesSyncEnabled")]);
    d->on_premises_sync_enabled_isSet = !json[QString("onPremisesSyncEnabled")].isNull() && d->on_premises_sync_enabled_isValid;

    d->on_premises_last_sync_date_time_isValid = ::OpenAPI::fromJsonValue(d->on_premises_last_sync_date_time, json[QString("onPremisesLastSyncDateTime")]);
    d->on_premises_last_sync_date_time_isSet = !json[QString("onPremisesLastSyncDateTime")].isNull() && d->on_premises_last_sync_date_time_isValid;

    d->on_premises_sam_account_name_isValid = ::OpenAPI::fromJsonValue(d->on_premises_sam_account_name, json[QString("onPremisesSamAccountName")]);
    d->on_premises_sam_account_name_isSet = !json[QString("onPremisesSamAccountName")].isNull() && d->on_premises_sam_account_name_isValid;

    d->on_premises_user_principal_name_isValid = ::OpenAPI::fromJsonValue(d->on_premises_user_principal_name, json[QString("onPremisesUserPrincipalName")]);
    d->on_premises_user_principal_name_isSet = !json[QString("onPremisesUserPrincipalName")].isNull() && d->on_premises_user_principal_name_isValid;

    d->office_location_isValid = ::OpenAPI::fromJsonValue(d->office_location, json[QString("officeLocation")]);
    d->office_location_isSet = !json[QString("officeLocation")].isNull() && d->office_location_isValid;

    d->password_profile_isValid = ::OpenAPI::fromJsonValue(d->password_profile, json[QString("passwordProfile")]);
    d->password_profile_isSet = !json[QString("passwordProfile")].isNull() && d->password_profile_isValid;

    d->postal_code_isValid = ::OpenAPI::fromJsonValue(d->postal_code, json[QString("postalCode")]);
    d->postal_code_isSet = !json[QString("postalCode")].isNull() && d->postal_code_isValid;

    d->preferred_language_isValid = ::OpenAPI::fromJsonValue(d->preferred_language, json[QString("preferredLanguage")]);
    d->preferred_language_isSet = !json[QString("preferredLanguage")].isNull() && d->preferred_language_isValid;

    d->state_isValid = ::OpenAPI::fromJsonValue(d->state, json[QString("state")]);
    d->state_isSet = !json[QString("state")].isNull() && d->state_isValid;

    d->street_address_isValid = ::OpenAPI::fromJsonValue(d->street_address, json[QString("streetAddress")]);
    d->street_address_isSet = !json[QString("streetAddress")].isNull() && d->street_address_isValid;

    d->surname_isValid = ::OpenAPI::fromJsonValue(d->surname, json[QString("surname")]);
    d->surname_isSet = !json[QString("surname")].isNull() && d->surname_isValid;

    d->usage_location_isValid = ::OpenAPI::fromJsonValue(d->usage_location, json[QString("usageLocation")]);
    d->usage_location_isSet = !json[QString("usageLocation")].isNull() && d->usage_location_isValid;

    d->user_principal_name_isValid = ::OpenAPI::fromJsonValue(d->user_principal_name, json[QString("userPrincipalName")]);
    d->user_principal_name_isSet = !json[QString("userPrincipalName")].isNull() && d->user_principal_name_isValid;

    d->user_type_isValid = ::OpenAPI::fromJsonValue(d->user_type, json[QString("userType")]);
    d->user_type_isSet = !json[QString("userType")].isNull() && d->user_type_isValid;

    d->about_me_isValid = ::OpenAPI::fromJsonValue(d->about_me, json[QString("aboutMe")]);
    d->about_me_isSet = !json[QString("aboutMe")].isNull() && d->about_me_isValid;

    d->birthday_isValid = ::OpenAPI::fromJsonValue(d->birthday, json[QString("birthday")]);
    d->birthday_isSet = !json[QString("birthday")].isNull() && d->birthday_isValid;

    d->preferred_name_isValid = ::OpenAPI::fromJsonValue(d->preferred_name, json[QString("preferredName")]);
    d->preferred_name_isSet = !json[QString("preferredName")].isNull() && d->preferred_name_isValid;

    d->drive_isValid = ::OpenAPI::fromJsonValue(d->drive, json[QString("drive")]);
    d->drive_isSet = !json[QString("drive")].isNull() && d->drive_isValid;

    d->drives_isValid = ::OpenAPI::fromJsonValue(d->drives, json[QString("drives")]);
    d->drives_isSet = !json[QString("drives")].isNull() && d->drives_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(d->id));
    }
    if (d->deleted_date_time_isSet) {
        obj.insert(QString("deletedDateTime"), ::OpenAPI::toJsonValue(d->deleted_date_time));
    }
    if (d->account_enabled_isSet) {
        obj.insert(QString("accountEnabled"), ::OpenAPI::toJsonValue(d->account_enabled));
    }
    if (d->business_phones.size() > 0) {
        obj.insert(QString("businessPhones"), ::OpenAPI::toJsonValue(d->business_phones));
    }
    if (d->city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(d->city));
    }
    if (d->company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(d->company_name));
    }
    if (d->country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(d->country));
    }
    if (d->created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(d->created_date_time));
    }
    if (d->department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(d->department));
    }
    if (d->display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(d->display_name));
    }
    if (d->fax_number_isSet) {
        obj.insert(QString("faxNumber"), ::OpenAPI::toJsonValue(d->fax_number));
    }
    if (d->given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(d->given_name));
    }
    if (d->last_password_change_date_time_isSet) {
        obj.insert(QString("lastPasswordChangeDateTime"), ::OpenAPI::toJsonValue(d->last_password_change_date_time));
    }
    if (d->legal_age_group_classification_isSet) {
        obj.insert(QString("legalAgeGroupClassification"), ::OpenAPI::toJsonValue(d->legal_age_group_classification));
    }
    if (d->mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(d->mail));
    }
    if (d->mail_nickname_isSet) {
        obj.insert(QString("mailNickname"), ::OpenAPI::toJsonValue(d->mail_nickname));
    }
    if (d->mobile_phone_isSet) {
        obj.insert(QString("mobilePhone"), ::OpenAPI::toJsonValue(d->mobile_phone));
    }
    if (d->on_premises_distinguished_name_isSet) {
        obj.insert(QString("onPremisesDistinguishedName"), ::OpenAPI::toJsonValue(d->on_premises_distinguished_name));
    }
    if (d->on_premises_domain_name_isSet) {
        obj.insert(QString("onPremisesDomainName"), ::OpenAPI::toJsonValue(d->on_premises_domain_name));
    }
    if (d->on_premises_immutable_id_isSet) {
        obj.insert(QString("onPremisesImmutableId"), ::OpenAPI::toJsonValue(d->on_premises_immutable_id));
    }
    if (d->on_premises_sync_enabled_isSet) {
        obj.insert(QString("onPremisesSyncEnabled"), ::OpenAPI::toJsonValue(d->on_premises_sync_enabled));
    }
    if (d->on_premises_last_sync_date_time_isSet) {
        obj.insert(QString("onPremisesLastSyncDateTime"), ::OpenAPI::toJsonValue(d->on_premises_last_sync_date_time));
    }
    if (d->on_premises_sam_account_name_isSet) {
        obj.insert(QString("onPremisesSamAccountName"), ::OpenAPI::toJsonValue(d->on_premises_sam_account_name));
    }
    if (d->on_premises_user_principal_name_isSet) {
        obj.insert(QString("onPremisesUserPrincipalName"), ::OpenAPI::toJsonValue(d->on_premises_user_principal_name));
    }
    if (d->office_location_isSet) {
        obj.insert(QString("officeLocation"), ::OpenAPI::toJsonValue(d->office_location));
    }
    if (d->password_profile.isSet()) {
        obj.insert(QString("passwordProfile"), ::OpenAPI::toJsonValue(d->password_profile));
    }
    if (d->postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(d->postal_code));
    }
    if (d->preferred_language_isSet) {
        obj.insert(QString("preferredLanguage"), ::OpenAPI::toJsonValue(d->preferred_language));
    }
    if (d->state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(d->state));
    }
    if (d->street_address_isSet) {
        obj.insert(QString("streetAddress"), ::OpenAPI::toJsonValue(d->street_address));
    }
    if (d->surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(d->surname));
    }
    if (d->usage_location_isSet) {
        obj.insert(QString("usageLocation"), ::OpenAPI::toJsonValue(d->usage_location));
    }
    if (d->user_principal_name_isSet) {
        obj.insert(QString("userPrincipalName"), ::OpenAPI::toJsonValue(d->user_principal_name));
    }
    if (d->user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(d->user_type));
    }
    if (d->about_me_isSet) {
        obj.insert(QString("aboutMe"), ::OpenAPI::toJsonValue(d->about_me));
    }
    if (d->birthday_isSet) {
        obj.insert(QString("birthday"), ::OpenAPI::toJsonValue(d->birthday));
    }
    if (d->preferred_name_isSet) {
        obj.insert(QString("preferredName"), ::OpenAPI::toJsonValue(d->preferred_name));
    }
    if (d->drive.isSet()) {
        obj.insert(QString("drive"), ::OpenAPI::toJsonValue(d->drive));
    }
    if (d->drives.size() > 0) {
        obj.insert(QString("drives"), ::OpenAPI::toJsonValue(d->drives));
    }
    return obj;
}

QString OAIUser::getId() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->id;
}
void OAIUser::setId(const QString &id) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->id = id;
    d->id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->id_isSet;
}

bool OAIUser::is_id_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->id_isValid;
}

QDateTime OAIUser::getDeletedDateTime() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->deleted_date_time;
}
void OAIUser::setDeletedDateTime(const QDateTime &deleted_date_time) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->deleted_date_time = deleted_date_time;
    d->deleted_date_time_isSet = true;
}

bool OAIUser::is_deleted_date_time_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->deleted_date_time_isSet;
}

bool OAIUser::is_deleted_date_time_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->deleted_date_time_isValid;
}

bool OAIUser::isAccountEnabled() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->account_enabled;
}
void OAIUser::setAccountEnabled(const bool &account_enabled) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->account_enabled = account_enabled;
    d->account_enabled_isSet = true;
}

bool OAIUser::is_account_enabled_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->account_enabled_isSet;
}

bool OAIUser::is_account_enabled_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->account_enabled_isValid;
}

QList<QString> OAIUser::getBusinessPhones() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->business_phones;
}
void OAIUser::setBusinessPhones(const QList<QString> &business_phones) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->business_phones = business_phones;
    d->business_phones_isSet = true;
}

bool OAIUser::is_business_phones_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->business_phones_isSet;
}

bool OAIUser::is_business_phones_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->business_phones_isValid;
}

QString OAIUser::getCity() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->city;
}
void OAIUser::setCity(const QString &city) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->city = city;
    d->city_isSet = true;
}

bool OAIUser::is_city_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->city_isSet;
}

bool OAIUser::is_city_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->city_isValid;
}

QString OAIUser::getCompanyName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->company_name;
}
void OAIUser::setCompanyName(const QString &company_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->company_name = company_name;
    d->company_name_isSet = true;
}

bool OAIUser::is_company_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->company_name_isSet;
}

bool OAIUser::is_company_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->company_name_isValid;
}

QString OAIUser::getCountry() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->country;
}
void OAIUser::setCountry(const QString &country) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->country = country;
    d->country_isSet = true;
}

bool OAIUser::is_country_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->country_isSet;
}

bool OAIUser::is_country_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->country_isValid;
}

QDateTime OAIUser::getCreatedDateTime() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->created_date_time;
}
void OAIUser::setCreatedDateTime(const QDateTime &created_date_time) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->created_date_time = created_date_time;
    d->created_date_time_isSet = true;
}

bool OAIUser::is_created_date_time_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->created_date_time_isSet;
}

bool OAIUser::is_created_date_time_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->created_date_time_isValid;
}

QString OAIUser::getDepartment() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->department;
}
void OAIUser::setDepartment(const QString &department) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->department = department;
    d->department_isSet = true;
}

bool OAIUser::is_department_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->department_isSet;
}

bool OAIUser::is_department_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->department_isValid;
}

QString OAIUser::getDisplayName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->display_name = display_name;
    d->display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->display_name_isValid;
}

QString OAIUser::getFaxNumber() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->fax_number;
}
void OAIUser::setFaxNumber(const QString &fax_number) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->fax_number = fax_number;
    d->fax_number_isSet = true;
}

bool OAIUser::is_fax_number_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->fax_number_isSet;
}

bool OAIUser::is_fax_number_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->fax_number_isValid;
}

QString OAIUser::getGivenName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->given_name;
}
void OAIUser::setGivenName(const QString &given_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->given_name = given_name;
    d->given_name_isSet = true;
}

bool OAIUser::is_given_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->given_name_isSet;
}

bool OAIUser::is_given_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->given_name_isValid;
}

QDateTime OAIUser::getLastPasswordChangeDateTime() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->last_password_change_date_time;
}
void OAIUser::setLastPasswordChangeDateTime(const QDateTime &last_password_change_date_time) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->last_password_change_date_time = last_password_change_date_time;
    d->last_password_change_date_time_isSet = true;
}

bool OAIUser::is_last_password_change_date_time_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->last_password_change_date_time_isSet;
}

bool OAIUser::is_last_password_change_date_time_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->last_password_change_date_time_isValid;
}

QString OAIUser::getLegalAgeGroupClassification() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->legal_age_group_classification;
}
void OAIUser::setLegalAgeGroupClassification(const QString &legal_age_group_classification) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->legal_age_group_classification = legal_age_group_classification;
    d->legal_age_group_classification_isSet = true;
}

bool OAIUser::is_legal_age_group_classification_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->legal_age_group_classification_isSet;
}

bool OAIUser::is_legal_age_group_classification_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->legal_age_group_classification_isValid;
}

QString OAIUser::getMail() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->mail;
}
void OAIUser::setMail(const QString &mail) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->mail = mail;
    d->mail_isSet = true;
}

bool OAIUser::is_mail_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->mail_isSet;
}

bool OAIUser::is_mail_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->mail_isValid;
}

QString OAIUser::getMailNickname() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->mail_nickname;
}
void OAIUser::setMailNickname(const QString &mail_nickname) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->mail_nickname = mail_nickname;
    d->mail_nickname_isSet = true;
}

bool OAIUser::is_mail_nickname_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->mail_nickname_isSet;
}

bool OAIUser::is_mail_nickname_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->mail_nickname_isValid;
}

QString OAIUser::getMobilePhone() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->mobile_phone;
}
void OAIUser::setMobilePhone(const QString &mobile_phone) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->mobile_phone = mobile_phone;
    d->mobile_phone_isSet = true;
}

bool OAIUser::is_mobile_phone_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->mobile_phone_isSet;
}

bool OAIUser::is_mobile_phone_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->mobile_phone_isValid;
}

QString OAIUser::getOnPremisesDistinguishedName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_distinguished_name;
}
void OAIUser::setOnPremisesDistinguishedName(const QString &on_premises_distinguished_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_distinguished_name = on_premises_distinguished_name;
    d->on_premises_distinguished_name_isSet = true;
}

bool OAIUser::is_on_premises_distinguished_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_distinguished_name_isSet;
}

bool OAIUser::is_on_premises_distinguished_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_distinguished_name_isValid;
}

QString OAIUser::getOnPremisesDomainName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_domain_name;
}
void OAIUser::setOnPremisesDomainName(const QString &on_premises_domain_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_domain_name = on_premises_domain_name;
    d->on_premises_domain_name_isSet = true;
}

bool OAIUser::is_on_premises_domain_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_domain_name_isSet;
}

bool OAIUser::is_on_premises_domain_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_domain_name_isValid;
}

QString OAIUser::getOnPremisesImmutableId() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_immutable_id;
}
void OAIUser::setOnPremisesImmutableId(const QString &on_premises_immutable_id) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_immutable_id = on_premises_immutable_id;
    d->on_premises_immutable_id_isSet = true;
}

bool OAIUser::is_on_premises_immutable_id_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_immutable_id_isSet;
}

bool OAIUser::is_on_premises_immutable_id_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_immutable_id_isValid;
}

bool OAIUser::isOnPremisesSyncEnabled() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_sync_enabled;
}
void OAIUser::setOnPremisesSyncEnabled(const bool &on_premises_sync_enabled) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_sync_enabled = on_premises_sync_enabled;
    d->on_premises_sync_enabled_isSet = true;
}

bool OAIUser::is_on_premises_sync_enabled_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_sync_enabled_isSet;
}

bool OAIUser::is_on_premises_sync_enabled_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_sync_enabled_isValid;
}

QDateTime OAIUser::getOnPremisesLastSyncDateTime() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_last_sync_date_time;
}
void OAIUser::setOnPremisesLastSyncDateTime(const QDateTime &on_premises_last_sync_date_time) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_last_sync_date_time = on_premises_last_sync_date_time;
    d->on_premises_last_sync_date_time_isSet = true;
}

bool OAIUser::is_on_premises_last_sync_date_time_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_last_sync_date_time_isSet;
}

bool OAIUser::is_on_premises_last_sync_date_time_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_last_sync_date_time_isValid;
}

QString OAIUser::getOnPremisesSamAccountName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_sam_account_name;
}
void OAIUser::setOnPremisesSamAccountName(const QString &on_premises_sam_account_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_sam_account_name = on_premises_sam_account_name;
    d->on_premises_sam_account_name_isSet = true;
}

bool OAIUser::is_on_premises_sam_account_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_sam_account_name_isSet;
}

bool OAIUser::is_on_premises_sam_account_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_sam_account_name_isValid;
}

QString OAIUser::getOnPremisesUserPrincipalName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->on_premises_user_principal_name;
}
void OAIUser::setOnPremisesUserPrincipalName(const QString &on_premises_user_principal_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->on_premises_user_principal_name = on_premises_user_principal_name;
    d->on_premises_user_principal_name_isSet = true;
}

bool OAIUser::is_on_premises_user_principal_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->on_premises_user_principal_name_isSet;
}

bool OAIUser::is_on_premises_user_principal_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->on_premises_user_principal_name_isValid;
}

QString OAIUser::getOfficeLocation() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->office_location;
}
void OAIUser::setOfficeLocation(const QString &office_location) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->office_location = office_location;
    d->office_location_isSet = true;
}

bool OAIUser::is_office_location_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->office_location_isSet;
}

bool OAIUser::is_office_location_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->office_location_isValid;
}

OAIPasswordProfile OAIUser::getPasswordProfile() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->password_profile;
}
void OAIUser::setPasswordProfile(const OAIPasswordProfile &password_profile) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->password_profile = password_profile;
    d->password_profile_isSet = true;
}

bool OAIUser::is_password_profile_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->password_profile_isSet;
}

bool OAIUser::is_password_profile_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->password_profile_isValid;
}

QString OAIUser::getPostalCode() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->postal_code;
}
void OAIUser::setPostalCode(const QString &postal_code) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->postal_code = postal_code;
    d->postal_code_isSet = true;
}

bool OAIUser::is_postal_code_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->postal_code_isSet;
}

bool OAIUser::is_postal_code_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->postal_code_isValid;
}

QString OAIUser::getPreferredLanguage() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->preferred_language;
}
void OAIUser::setPreferredLanguage(const QString &preferred_language) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->preferred_language = preferred_language;
    d->preferred_language_isSet = true;
}

bool OAIUser::is_preferred_language_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->preferred_language_isSet;
}

bool OAIUser::is_preferred_language_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->preferred_language_isValid;
}

QString OAIUser::getState() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->state;
}
void OAIUser::setState(const QString &state) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->state = state;
    d->state_isSet = true;
}

bool OAIUser::is_state_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->state_isSet;
}

bool OAIUser::is_state_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->state_isValid;
}

QString OAIUser::getStreetAddress() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->street_address;
}
void OAIUser::setStreetAddress(const QString &street_address) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->street_address = street_address;
    d->street_address_isSet = true;
}

bool OAIUser::is_street_address_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->street_address_isSet;
}

bool OAIUser::is_street_address_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->street_address_isValid;
}

QString OAIUser::getSurname() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->surname;
}
void OAIUser::setSurname(const QString &surname) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->surname = surname;
    d->surname_isSet = true;
}

bool OAIUser::is_surname_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->surname_isSet;
}

bool OAIUser::is_surname_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->surname_isValid;
}

QString OAIUser::getUsageLocation() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->usage_location;
}
void OAIUser::setUsageLocation(const QString &usage_location) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->usage_location = usage_location;
    d->usage_location_isSet = true;
}

bool OAIUser::is_usage_location_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->usage_location_isSet;
}

bool OAIUser::is_usage_location_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->usage_location_isValid;
}

QString OAIUser::getUserPrincipalName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->user_principal_name;
}
void OAIUser::setUserPrincipalName(const QString &user_principal_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->user_principal_name = user_principal_name;
    d->user_principal_name_isSet = true;
}

bool OAIUser::is_user_principal_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->user_principal_name_isSet;
}

bool OAIUser::is_user_principal_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->user_principal_name_isValid;
}

QString OAIUser::getUserType() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->user_type;
}
void OAIUser::setUserType(const QString &user_type) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->user_type = user_type;
    d->user_type_isSet = true;
}

bool OAIUser::is_user_type_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->user_type_isSet;
}

bool OAIUser::is_user_type_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->user_type_isValid;
}

QString OAIUser::getAboutMe() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->about_me;
}
void OAIUser::setAboutMe(const QString &about_me) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->about_me = about_me;
    d->about_me_isSet = true;
}

bool OAIUser::is_about_me_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->about_me_isSet;
}

bool OAIUser::is_about_me_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->about_me_isValid;
}

QDateTime OAIUser::getBirthday() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->birthday;
}
void OAIUser::setBirthday(const QDateTime &birthday) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->birthday = birthday;
    d->birthday_isSet = true;
}

bool OAIUser::is_birthday_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->birthday_isSet;
}

bool OAIUser::is_birthday_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->birthday_isValid;
}

QString OAIUser::getPreferredName() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->preferred_name;
}
void OAIUser::setPreferredName(const QString &preferred_name) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->preferred_name = preferred_name;
    d->preferred_name_isSet = true;
}

bool OAIUser::is_preferred_name_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->preferred_name_isSet;
}

bool OAIUser::is_preferred_name_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->preferred_name_isValid;
}

OAIDrive OAIUser::getDrive() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->drive;
}
void OAIUser::setDrive(const OAIDrive &drive) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->drive = drive;
    d->drive_isSet = true;
}

bool OAIUser::is_drive_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->drive_isSet;
}

bool OAIUser::is_drive_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->drive_isValid;
}

QList<OAIDrive> OAIUser::getDrives() const {
    Q_D(const OAIUser);
    if(!d){
        return {};
    }
    return d->drives;
}
void OAIUser::setDrives(const QList<OAIDrive> &drives) {
    Q_D(OAIUser);
    Q_ASSERT(d);

    d->drives = drives;
    d->drives_isSet = true;
}

bool OAIUser::is_drives_Set() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }

    return d->drives_isSet;
}

bool OAIUser::is_drives_Valid() const{
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    return d->drives_isValid;
}

bool OAIUser::isSet() const {
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->deleted_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->account_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->business_phones.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->fax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->last_password_change_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->legal_age_group_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->mail_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->mobile_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_distinguished_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_immutable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_sync_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_last_sync_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_sam_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->office_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->password_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->preferred_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->usage_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->user_principal_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->about_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->birthday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->preferred_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->drives.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    Q_D(const OAIUser);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
