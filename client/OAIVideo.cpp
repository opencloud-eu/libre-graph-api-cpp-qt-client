// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIVideoPrivate {
    friend class OAIVideo;

     qint32 audio_bits_per_sample;
     bool audio_bits_per_sample_isSet;
     bool audio_bits_per_sample_isValid;

     qint32 audio_channels;
     bool audio_channels_isSet;
     bool audio_channels_isValid;

     QString audio_format;
     bool audio_format_isSet;
     bool audio_format_isValid;

     qint32 audio_samples_per_second;
     bool audio_samples_per_second_isSet;
     bool audio_samples_per_second_isValid;

     qint32 bitrate;
     bool bitrate_isSet;
     bool bitrate_isValid;

     qint64 duration;
     bool duration_isSet;
     bool duration_isValid;

     QString four_cc;
     bool four_cc_isSet;
     bool four_cc_isValid;

     double frame_rate;
     bool frame_rate_isSet;
     bool frame_rate_isValid;

     qint32 height;
     bool height_isSet;
     bool height_isValid;

     qint32 width;
     bool width_isSet;
     bool width_isValid;
};

OAIVideo::OAIVideo()
    : d_ptr()
{
}

OAIVideo::OAIVideo(const OAIVideo& other)
    : d_ptr(other.d_ptr)
{
}

OAIVideo::OAIVideo(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIVideo::~OAIVideo() = default;

void OAIVideo::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIVideoPrivate{});

        Q_D(OAIVideo);


        d->audio_bits_per_sample_isSet = false;
        d->audio_bits_per_sample_isValid = false;

        d->audio_channels_isSet = false;
        d->audio_channels_isValid = false;

        d->audio_format_isSet = false;
        d->audio_format_isValid = false;

        d->audio_samples_per_second_isSet = false;
        d->audio_samples_per_second_isValid = false;

        d->bitrate_isSet = false;
        d->bitrate_isValid = false;

        d->duration_isSet = false;
        d->duration_isValid = false;

        d->four_cc_isSet = false;
        d->four_cc_isValid = false;

        d->frame_rate_isSet = false;
        d->frame_rate_isValid = false;

        d->height_isSet = false;
        d->height_isValid = false;

        d->width_isSet = false;
        d->width_isValid = false;
    }
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIVideo);

    d->audio_bits_per_sample_isValid = ::OpenAPI::fromJsonValue(d->audio_bits_per_sample, json[QString("audioBitsPerSample")]);
    d->audio_bits_per_sample_isSet = !json[QString("audioBitsPerSample")].isNull() && d->audio_bits_per_sample_isValid;

    d->audio_channels_isValid = ::OpenAPI::fromJsonValue(d->audio_channels, json[QString("audioChannels")]);
    d->audio_channels_isSet = !json[QString("audioChannels")].isNull() && d->audio_channels_isValid;

    d->audio_format_isValid = ::OpenAPI::fromJsonValue(d->audio_format, json[QString("audioFormat")]);
    d->audio_format_isSet = !json[QString("audioFormat")].isNull() && d->audio_format_isValid;

    d->audio_samples_per_second_isValid = ::OpenAPI::fromJsonValue(d->audio_samples_per_second, json[QString("audioSamplesPerSecond")]);
    d->audio_samples_per_second_isSet = !json[QString("audioSamplesPerSecond")].isNull() && d->audio_samples_per_second_isValid;

    d->bitrate_isValid = ::OpenAPI::fromJsonValue(d->bitrate, json[QString("bitrate")]);
    d->bitrate_isSet = !json[QString("bitrate")].isNull() && d->bitrate_isValid;

    d->duration_isValid = ::OpenAPI::fromJsonValue(d->duration, json[QString("duration")]);
    d->duration_isSet = !json[QString("duration")].isNull() && d->duration_isValid;

    d->four_cc_isValid = ::OpenAPI::fromJsonValue(d->four_cc, json[QString("fourCC")]);
    d->four_cc_isSet = !json[QString("fourCC")].isNull() && d->four_cc_isValid;

    d->frame_rate_isValid = ::OpenAPI::fromJsonValue(d->frame_rate, json[QString("frameRate")]);
    d->frame_rate_isSet = !json[QString("frameRate")].isNull() && d->frame_rate_isValid;

    d->height_isValid = ::OpenAPI::fromJsonValue(d->height, json[QString("height")]);
    d->height_isSet = !json[QString("height")].isNull() && d->height_isValid;

    d->width_isValid = ::OpenAPI::fromJsonValue(d->width, json[QString("width")]);
    d->width_isSet = !json[QString("width")].isNull() && d->width_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->audio_bits_per_sample_isSet) {
        obj.insert(QString("audioBitsPerSample"), ::OpenAPI::toJsonValue(d->audio_bits_per_sample));
    }
    if (d->audio_channels_isSet) {
        obj.insert(QString("audioChannels"), ::OpenAPI::toJsonValue(d->audio_channels));
    }
    if (d->audio_format_isSet) {
        obj.insert(QString("audioFormat"), ::OpenAPI::toJsonValue(d->audio_format));
    }
    if (d->audio_samples_per_second_isSet) {
        obj.insert(QString("audioSamplesPerSecond"), ::OpenAPI::toJsonValue(d->audio_samples_per_second));
    }
    if (d->bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(d->bitrate));
    }
    if (d->duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(d->duration));
    }
    if (d->four_cc_isSet) {
        obj.insert(QString("fourCC"), ::OpenAPI::toJsonValue(d->four_cc));
    }
    if (d->frame_rate_isSet) {
        obj.insert(QString("frameRate"), ::OpenAPI::toJsonValue(d->frame_rate));
    }
    if (d->height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(d->height));
    }
    if (d->width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(d->width));
    }
    return obj;
}

qint32 OAIVideo::getAudioBitsPerSample() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->audio_bits_per_sample;
}
void OAIVideo::setAudioBitsPerSample(const qint32 &audio_bits_per_sample) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->audio_bits_per_sample = audio_bits_per_sample;
    d->audio_bits_per_sample_isSet = true;
}

bool OAIVideo::is_audio_bits_per_sample_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->audio_bits_per_sample_isSet;
}

bool OAIVideo::is_audio_bits_per_sample_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->audio_bits_per_sample_isValid;
}

qint32 OAIVideo::getAudioChannels() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->audio_channels;
}
void OAIVideo::setAudioChannels(const qint32 &audio_channels) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->audio_channels = audio_channels;
    d->audio_channels_isSet = true;
}

bool OAIVideo::is_audio_channels_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->audio_channels_isSet;
}

bool OAIVideo::is_audio_channels_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->audio_channels_isValid;
}

QString OAIVideo::getAudioFormat() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->audio_format;
}
void OAIVideo::setAudioFormat(const QString &audio_format) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->audio_format = audio_format;
    d->audio_format_isSet = true;
}

bool OAIVideo::is_audio_format_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->audio_format_isSet;
}

bool OAIVideo::is_audio_format_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->audio_format_isValid;
}

qint32 OAIVideo::getAudioSamplesPerSecond() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->audio_samples_per_second;
}
void OAIVideo::setAudioSamplesPerSecond(const qint32 &audio_samples_per_second) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->audio_samples_per_second = audio_samples_per_second;
    d->audio_samples_per_second_isSet = true;
}

bool OAIVideo::is_audio_samples_per_second_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->audio_samples_per_second_isSet;
}

bool OAIVideo::is_audio_samples_per_second_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->audio_samples_per_second_isValid;
}

qint32 OAIVideo::getBitrate() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->bitrate;
}
void OAIVideo::setBitrate(const qint32 &bitrate) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->bitrate = bitrate;
    d->bitrate_isSet = true;
}

bool OAIVideo::is_bitrate_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->bitrate_isSet;
}

bool OAIVideo::is_bitrate_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->bitrate_isValid;
}

qint64 OAIVideo::getDuration() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->duration;
}
void OAIVideo::setDuration(const qint64 &duration) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->duration = duration;
    d->duration_isSet = true;
}

bool OAIVideo::is_duration_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->duration_isSet;
}

bool OAIVideo::is_duration_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->duration_isValid;
}

QString OAIVideo::getFourCc() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->four_cc;
}
void OAIVideo::setFourCc(const QString &four_cc) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->four_cc = four_cc;
    d->four_cc_isSet = true;
}

bool OAIVideo::is_four_cc_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->four_cc_isSet;
}

bool OAIVideo::is_four_cc_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->four_cc_isValid;
}

double OAIVideo::getFrameRate() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->frame_rate;
}
void OAIVideo::setFrameRate(const double &frame_rate) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->frame_rate = frame_rate;
    d->frame_rate_isSet = true;
}

bool OAIVideo::is_frame_rate_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->frame_rate_isSet;
}

bool OAIVideo::is_frame_rate_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->frame_rate_isValid;
}

qint32 OAIVideo::getHeight() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->height;
}
void OAIVideo::setHeight(const qint32 &height) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->height = height;
    d->height_isSet = true;
}

bool OAIVideo::is_height_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->height_isSet;
}

bool OAIVideo::is_height_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->height_isValid;
}

qint32 OAIVideo::getWidth() const {
    Q_D(const OAIVideo);
    if(!d){
        return {};
    }
    return d->width;
}
void OAIVideo::setWidth(const qint32 &width) {
    Q_D(OAIVideo);
    Q_ASSERT(d);

    d->width = width;
    d->width_isSet = true;
}

bool OAIVideo::is_width_Set() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }

    return d->width_isSet;
}

bool OAIVideo::is_width_Valid() const{
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    return d->width_isValid;
}

bool OAIVideo::isSet() const {
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->audio_bits_per_sample_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->audio_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->audio_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->audio_samples_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->four_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    Q_D(const OAIVideo);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
