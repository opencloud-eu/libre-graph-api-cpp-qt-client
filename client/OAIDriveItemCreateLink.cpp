// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriveItemCreateLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIDriveItemCreateLinkPrivate {
    friend class OAIDriveItemCreateLink;

     OAISharingLinkType type;
     bool type_isSet;
     bool type_isValid;

     QDateTime expiration_date_time;
     bool expiration_date_time_isSet;
     bool expiration_date_time_isValid;

     QString password;
     bool password_isSet;
     bool password_isValid;

     QString display_name;
     bool display_name_isSet;
     bool display_name_isValid;

     bool libre_graph_quick_link;
     bool libre_graph_quick_link_isSet;
     bool libre_graph_quick_link_isValid;
};

OAIDriveItemCreateLink::OAIDriveItemCreateLink()
    : d_ptr()
{
}

OAIDriveItemCreateLink::OAIDriveItemCreateLink(const OAIDriveItemCreateLink& other)
    : d_ptr(other.d_ptr)
{
}

OAIDriveItemCreateLink::OAIDriveItemCreateLink(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIDriveItemCreateLink::~OAIDriveItemCreateLink() = default;

void OAIDriveItemCreateLink::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIDriveItemCreateLinkPrivate{});

        Q_D(OAIDriveItemCreateLink);


        d->type_isSet = false;
        d->type_isValid = false;

        d->expiration_date_time_isSet = false;
        d->expiration_date_time_isValid = false;

        d->password_isSet = false;
        d->password_isValid = false;

        d->display_name_isSet = false;
        d->display_name_isValid = false;

        d->libre_graph_quick_link_isSet = false;
        d->libre_graph_quick_link_isValid = false;
    }
}

void OAIDriveItemCreateLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriveItemCreateLink::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIDriveItemCreateLink);

    d->type_isValid = ::OpenAPI::fromJsonValue(d->type, json[QString("type")]);
    d->type_isSet = !json[QString("type")].isNull() && d->type_isValid;

    d->expiration_date_time_isValid = ::OpenAPI::fromJsonValue(d->expiration_date_time, json[QString("expirationDateTime")]);
    d->expiration_date_time_isSet = !json[QString("expirationDateTime")].isNull() && d->expiration_date_time_isValid;

    d->password_isValid = ::OpenAPI::fromJsonValue(d->password, json[QString("password")]);
    d->password_isSet = !json[QString("password")].isNull() && d->password_isValid;

    d->display_name_isValid = ::OpenAPI::fromJsonValue(d->display_name, json[QString("displayName")]);
    d->display_name_isSet = !json[QString("displayName")].isNull() && d->display_name_isValid;

    d->libre_graph_quick_link_isValid = ::OpenAPI::fromJsonValue(d->libre_graph_quick_link, json[QString("@libre.graph.quickLink")]);
    d->libre_graph_quick_link_isSet = !json[QString("@libre.graph.quickLink")].isNull() && d->libre_graph_quick_link_isValid;
}

QString OAIDriveItemCreateLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDriveItemCreateLink::asJsonObject() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(d->type));
    }
    if (d->expiration_date_time_isSet) {
        obj.insert(QString("expirationDateTime"), ::OpenAPI::toJsonValue(d->expiration_date_time));
    }
    if (d->password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(d->password));
    }
    if (d->display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(d->display_name));
    }
    if (d->libre_graph_quick_link_isSet) {
        obj.insert(QString("@libre.graph.quickLink"), ::OpenAPI::toJsonValue(d->libre_graph_quick_link));
    }
    return obj;
}

OAISharingLinkType OAIDriveItemCreateLink::getType() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return {};
    }
    return d->type;
}
void OAIDriveItemCreateLink::setType(const OAISharingLinkType &type) {
    Q_D(OAIDriveItemCreateLink);
    Q_ASSERT(d);

    d->type = type;
    d->type_isSet = true;
}

bool OAIDriveItemCreateLink::is_type_Set() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }

    return d->type_isSet;
}

bool OAIDriveItemCreateLink::is_type_Valid() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    return d->type_isValid;
}

QDateTime OAIDriveItemCreateLink::getExpirationDateTime() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return {};
    }
    return d->expiration_date_time;
}
void OAIDriveItemCreateLink::setExpirationDateTime(const QDateTime &expiration_date_time) {
    Q_D(OAIDriveItemCreateLink);
    Q_ASSERT(d);

    d->expiration_date_time = expiration_date_time;
    d->expiration_date_time_isSet = true;
}

bool OAIDriveItemCreateLink::is_expiration_date_time_Set() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }

    return d->expiration_date_time_isSet;
}

bool OAIDriveItemCreateLink::is_expiration_date_time_Valid() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    return d->expiration_date_time_isValid;
}

QString OAIDriveItemCreateLink::getPassword() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return {};
    }
    return d->password;
}
void OAIDriveItemCreateLink::setPassword(const QString &password) {
    Q_D(OAIDriveItemCreateLink);
    Q_ASSERT(d);

    d->password = password;
    d->password_isSet = true;
}

bool OAIDriveItemCreateLink::is_password_Set() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }

    return d->password_isSet;
}

bool OAIDriveItemCreateLink::is_password_Valid() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    return d->password_isValid;
}

QString OAIDriveItemCreateLink::getDisplayName() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return {};
    }
    return d->display_name;
}
void OAIDriveItemCreateLink::setDisplayName(const QString &display_name) {
    Q_D(OAIDriveItemCreateLink);
    Q_ASSERT(d);

    d->display_name = display_name;
    d->display_name_isSet = true;
}

bool OAIDriveItemCreateLink::is_display_name_Set() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }

    return d->display_name_isSet;
}

bool OAIDriveItemCreateLink::is_display_name_Valid() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    return d->display_name_isValid;
}

bool OAIDriveItemCreateLink::isLibreGraphQuickLink() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return {};
    }
    return d->libre_graph_quick_link;
}
void OAIDriveItemCreateLink::setLibreGraphQuickLink(const bool &libre_graph_quick_link) {
    Q_D(OAIDriveItemCreateLink);
    Q_ASSERT(d);

    d->libre_graph_quick_link = libre_graph_quick_link;
    d->libre_graph_quick_link_isSet = true;
}

bool OAIDriveItemCreateLink::is_libre_graph_quick_link_Set() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }

    return d->libre_graph_quick_link_isSet;
}

bool OAIDriveItemCreateLink::is_libre_graph_quick_link_Valid() const{
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    return d->libre_graph_quick_link_isValid;
}

bool OAIDriveItemCreateLink::isSet() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->expiration_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->libre_graph_quick_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriveItemCreateLink::isValid() const {
    Q_D(const OAIDriveItemCreateLink);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
