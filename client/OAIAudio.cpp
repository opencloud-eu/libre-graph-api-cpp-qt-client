// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIAudioPrivate {
    friend class OAIAudio;

     QString album;
     bool album_isSet;
     bool album_isValid;

     QString album_artist;
     bool album_artist_isSet;
     bool album_artist_isValid;

     QString artist;
     bool artist_isSet;
     bool artist_isValid;

     qint64 bitrate;
     bool bitrate_isSet;
     bool bitrate_isValid;

     QString composers;
     bool composers_isSet;
     bool composers_isValid;

     QString copyright;
     bool copyright_isSet;
     bool copyright_isValid;

     qint32 disc;
     bool disc_isSet;
     bool disc_isValid;

     qint32 disc_count;
     bool disc_count_isSet;
     bool disc_count_isValid;

     qint64 duration;
     bool duration_isSet;
     bool duration_isValid;

     QString genre;
     bool genre_isSet;
     bool genre_isValid;

     bool has_drm;
     bool has_drm_isSet;
     bool has_drm_isValid;

     bool is_variable_bitrate;
     bool is_variable_bitrate_isSet;
     bool is_variable_bitrate_isValid;

     QString title;
     bool title_isSet;
     bool title_isValid;

     qint32 track;
     bool track_isSet;
     bool track_isValid;

     qint32 track_count;
     bool track_count_isSet;
     bool track_count_isValid;

     qint32 year;
     bool year_isSet;
     bool year_isValid;
};

OAIAudio::OAIAudio()
    : d_ptr()
{
}

OAIAudio::OAIAudio(const OAIAudio& other)
    : d_ptr(other.d_ptr)
{
}

OAIAudio::OAIAudio(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIAudio::~OAIAudio() = default;

void OAIAudio::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIAudioPrivate{});

        Q_D(OAIAudio);


        d->album_isSet = false;
        d->album_isValid = false;

        d->album_artist_isSet = false;
        d->album_artist_isValid = false;

        d->artist_isSet = false;
        d->artist_isValid = false;

        d->bitrate_isSet = false;
        d->bitrate_isValid = false;

        d->composers_isSet = false;
        d->composers_isValid = false;

        d->copyright_isSet = false;
        d->copyright_isValid = false;

        d->disc_isSet = false;
        d->disc_isValid = false;

        d->disc_count_isSet = false;
        d->disc_count_isValid = false;

        d->duration_isSet = false;
        d->duration_isValid = false;

        d->genre_isSet = false;
        d->genre_isValid = false;

        d->has_drm_isSet = false;
        d->has_drm_isValid = false;

        d->is_variable_bitrate_isSet = false;
        d->is_variable_bitrate_isValid = false;

        d->title_isSet = false;
        d->title_isValid = false;

        d->track_isSet = false;
        d->track_isValid = false;

        d->track_count_isSet = false;
        d->track_count_isValid = false;

        d->year_isSet = false;
        d->year_isValid = false;
    }
}

void OAIAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudio::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIAudio);

    d->album_isValid = ::OpenAPI::fromJsonValue(d->album, json[QString("album")]);
    d->album_isSet = !json[QString("album")].isNull() && d->album_isValid;

    d->album_artist_isValid = ::OpenAPI::fromJsonValue(d->album_artist, json[QString("albumArtist")]);
    d->album_artist_isSet = !json[QString("albumArtist")].isNull() && d->album_artist_isValid;

    d->artist_isValid = ::OpenAPI::fromJsonValue(d->artist, json[QString("artist")]);
    d->artist_isSet = !json[QString("artist")].isNull() && d->artist_isValid;

    d->bitrate_isValid = ::OpenAPI::fromJsonValue(d->bitrate, json[QString("bitrate")]);
    d->bitrate_isSet = !json[QString("bitrate")].isNull() && d->bitrate_isValid;

    d->composers_isValid = ::OpenAPI::fromJsonValue(d->composers, json[QString("composers")]);
    d->composers_isSet = !json[QString("composers")].isNull() && d->composers_isValid;

    d->copyright_isValid = ::OpenAPI::fromJsonValue(d->copyright, json[QString("copyright")]);
    d->copyright_isSet = !json[QString("copyright")].isNull() && d->copyright_isValid;

    d->disc_isValid = ::OpenAPI::fromJsonValue(d->disc, json[QString("disc")]);
    d->disc_isSet = !json[QString("disc")].isNull() && d->disc_isValid;

    d->disc_count_isValid = ::OpenAPI::fromJsonValue(d->disc_count, json[QString("discCount")]);
    d->disc_count_isSet = !json[QString("discCount")].isNull() && d->disc_count_isValid;

    d->duration_isValid = ::OpenAPI::fromJsonValue(d->duration, json[QString("duration")]);
    d->duration_isSet = !json[QString("duration")].isNull() && d->duration_isValid;

    d->genre_isValid = ::OpenAPI::fromJsonValue(d->genre, json[QString("genre")]);
    d->genre_isSet = !json[QString("genre")].isNull() && d->genre_isValid;

    d->has_drm_isValid = ::OpenAPI::fromJsonValue(d->has_drm, json[QString("hasDrm")]);
    d->has_drm_isSet = !json[QString("hasDrm")].isNull() && d->has_drm_isValid;

    d->is_variable_bitrate_isValid = ::OpenAPI::fromJsonValue(d->is_variable_bitrate, json[QString("isVariableBitrate")]);
    d->is_variable_bitrate_isSet = !json[QString("isVariableBitrate")].isNull() && d->is_variable_bitrate_isValid;

    d->title_isValid = ::OpenAPI::fromJsonValue(d->title, json[QString("title")]);
    d->title_isSet = !json[QString("title")].isNull() && d->title_isValid;

    d->track_isValid = ::OpenAPI::fromJsonValue(d->track, json[QString("track")]);
    d->track_isSet = !json[QString("track")].isNull() && d->track_isValid;

    d->track_count_isValid = ::OpenAPI::fromJsonValue(d->track_count, json[QString("trackCount")]);
    d->track_count_isSet = !json[QString("trackCount")].isNull() && d->track_count_isValid;

    d->year_isValid = ::OpenAPI::fromJsonValue(d->year, json[QString("year")]);
    d->year_isSet = !json[QString("year")].isNull() && d->year_isValid;
}

QString OAIAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudio::asJsonObject() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->album_isSet) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(d->album));
    }
    if (d->album_artist_isSet) {
        obj.insert(QString("albumArtist"), ::OpenAPI::toJsonValue(d->album_artist));
    }
    if (d->artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(d->artist));
    }
    if (d->bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(d->bitrate));
    }
    if (d->composers_isSet) {
        obj.insert(QString("composers"), ::OpenAPI::toJsonValue(d->composers));
    }
    if (d->copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(d->copyright));
    }
    if (d->disc_isSet) {
        obj.insert(QString("disc"), ::OpenAPI::toJsonValue(d->disc));
    }
    if (d->disc_count_isSet) {
        obj.insert(QString("discCount"), ::OpenAPI::toJsonValue(d->disc_count));
    }
    if (d->duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(d->duration));
    }
    if (d->genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(d->genre));
    }
    if (d->has_drm_isSet) {
        obj.insert(QString("hasDrm"), ::OpenAPI::toJsonValue(d->has_drm));
    }
    if (d->is_variable_bitrate_isSet) {
        obj.insert(QString("isVariableBitrate"), ::OpenAPI::toJsonValue(d->is_variable_bitrate));
    }
    if (d->title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(d->title));
    }
    if (d->track_isSet) {
        obj.insert(QString("track"), ::OpenAPI::toJsonValue(d->track));
    }
    if (d->track_count_isSet) {
        obj.insert(QString("trackCount"), ::OpenAPI::toJsonValue(d->track_count));
    }
    if (d->year_isSet) {
        obj.insert(QString("year"), ::OpenAPI::toJsonValue(d->year));
    }
    return obj;
}

QString OAIAudio::getAlbum() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->album;
}
void OAIAudio::setAlbum(const QString &album) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->album = album;
    d->album_isSet = true;
}

bool OAIAudio::is_album_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->album_isSet;
}

bool OAIAudio::is_album_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->album_isValid;
}

QString OAIAudio::getAlbumArtist() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->album_artist;
}
void OAIAudio::setAlbumArtist(const QString &album_artist) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->album_artist = album_artist;
    d->album_artist_isSet = true;
}

bool OAIAudio::is_album_artist_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->album_artist_isSet;
}

bool OAIAudio::is_album_artist_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->album_artist_isValid;
}

QString OAIAudio::getArtist() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->artist;
}
void OAIAudio::setArtist(const QString &artist) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->artist = artist;
    d->artist_isSet = true;
}

bool OAIAudio::is_artist_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->artist_isSet;
}

bool OAIAudio::is_artist_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->artist_isValid;
}

qint64 OAIAudio::getBitrate() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->bitrate;
}
void OAIAudio::setBitrate(const qint64 &bitrate) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->bitrate = bitrate;
    d->bitrate_isSet = true;
}

bool OAIAudio::is_bitrate_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->bitrate_isSet;
}

bool OAIAudio::is_bitrate_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->bitrate_isValid;
}

QString OAIAudio::getComposers() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->composers;
}
void OAIAudio::setComposers(const QString &composers) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->composers = composers;
    d->composers_isSet = true;
}

bool OAIAudio::is_composers_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->composers_isSet;
}

bool OAIAudio::is_composers_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->composers_isValid;
}

QString OAIAudio::getCopyright() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->copyright;
}
void OAIAudio::setCopyright(const QString &copyright) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->copyright = copyright;
    d->copyright_isSet = true;
}

bool OAIAudio::is_copyright_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->copyright_isSet;
}

bool OAIAudio::is_copyright_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->copyright_isValid;
}

qint32 OAIAudio::getDisc() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->disc;
}
void OAIAudio::setDisc(const qint32 &disc) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->disc = disc;
    d->disc_isSet = true;
}

bool OAIAudio::is_disc_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->disc_isSet;
}

bool OAIAudio::is_disc_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->disc_isValid;
}

qint32 OAIAudio::getDiscCount() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->disc_count;
}
void OAIAudio::setDiscCount(const qint32 &disc_count) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->disc_count = disc_count;
    d->disc_count_isSet = true;
}

bool OAIAudio::is_disc_count_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->disc_count_isSet;
}

bool OAIAudio::is_disc_count_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->disc_count_isValid;
}

qint64 OAIAudio::getDuration() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->duration;
}
void OAIAudio::setDuration(const qint64 &duration) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->duration = duration;
    d->duration_isSet = true;
}

bool OAIAudio::is_duration_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->duration_isSet;
}

bool OAIAudio::is_duration_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->duration_isValid;
}

QString OAIAudio::getGenre() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->genre;
}
void OAIAudio::setGenre(const QString &genre) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->genre = genre;
    d->genre_isSet = true;
}

bool OAIAudio::is_genre_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->genre_isSet;
}

bool OAIAudio::is_genre_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->genre_isValid;
}

bool OAIAudio::isHasDrm() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->has_drm;
}
void OAIAudio::setHasDrm(const bool &has_drm) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->has_drm = has_drm;
    d->has_drm_isSet = true;
}

bool OAIAudio::is_has_drm_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->has_drm_isSet;
}

bool OAIAudio::is_has_drm_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->has_drm_isValid;
}

bool OAIAudio::isIsVariableBitrate() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->is_variable_bitrate;
}
void OAIAudio::setIsVariableBitrate(const bool &is_variable_bitrate) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->is_variable_bitrate = is_variable_bitrate;
    d->is_variable_bitrate_isSet = true;
}

bool OAIAudio::is_is_variable_bitrate_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->is_variable_bitrate_isSet;
}

bool OAIAudio::is_is_variable_bitrate_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->is_variable_bitrate_isValid;
}

QString OAIAudio::getTitle() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->title;
}
void OAIAudio::setTitle(const QString &title) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->title = title;
    d->title_isSet = true;
}

bool OAIAudio::is_title_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->title_isSet;
}

bool OAIAudio::is_title_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->title_isValid;
}

qint32 OAIAudio::getTrack() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->track;
}
void OAIAudio::setTrack(const qint32 &track) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->track = track;
    d->track_isSet = true;
}

bool OAIAudio::is_track_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->track_isSet;
}

bool OAIAudio::is_track_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->track_isValid;
}

qint32 OAIAudio::getTrackCount() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->track_count;
}
void OAIAudio::setTrackCount(const qint32 &track_count) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->track_count = track_count;
    d->track_count_isSet = true;
}

bool OAIAudio::is_track_count_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->track_count_isSet;
}

bool OAIAudio::is_track_count_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->track_count_isValid;
}

qint32 OAIAudio::getYear() const {
    Q_D(const OAIAudio);
    if(!d){
        return {};
    }
    return d->year;
}
void OAIAudio::setYear(const qint32 &year) {
    Q_D(OAIAudio);
    Q_ASSERT(d);

    d->year = year;
    d->year_isSet = true;
}

bool OAIAudio::is_year_Set() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }

    return d->year_isSet;
}

bool OAIAudio::is_year_Valid() const{
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    return d->year_isValid;
}

bool OAIAudio::isSet() const {
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->album_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->album_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->composers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->disc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->disc_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->has_drm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->is_variable_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->track_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudio::isValid() const {
    Q_D(const OAIAudio);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
