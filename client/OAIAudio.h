// model-header.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAudio.h
 *
 * The Audio resource groups audio-related properties on an item into a single structure.  If a DriveItem has a non-null audio facet, the item represents an audio file. The properties of the Audio resource are populated by extracting metadata from the file. 
 */

#ifndef OAIAudio_H
#define OAIAudio_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {


class OAIAudioPrivate;

class OAIAudio : public OAIObject {
public:
    OAIAudio();
    OAIAudio(const OAIAudio &other);
    OAIAudio(QString json);
    ~OAIAudio() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlbum() const;
    void setAlbum(const QString &album);
    bool is_album_Set() const;
    bool is_album_Valid() const;

    QString getAlbumArtist() const;
    void setAlbumArtist(const QString &album_artist);
    bool is_album_artist_Set() const;
    bool is_album_artist_Valid() const;

    QString getArtist() const;
    void setArtist(const QString &artist);
    bool is_artist_Set() const;
    bool is_artist_Valid() const;

    qint64 getBitrate() const;
    void setBitrate(const qint64 &bitrate);
    bool is_bitrate_Set() const;
    bool is_bitrate_Valid() const;

    QString getComposers() const;
    void setComposers(const QString &composers);
    bool is_composers_Set() const;
    bool is_composers_Valid() const;

    QString getCopyright() const;
    void setCopyright(const QString &copyright);
    bool is_copyright_Set() const;
    bool is_copyright_Valid() const;

    qint32 getDisc() const;
    void setDisc(const qint32 &disc);
    bool is_disc_Set() const;
    bool is_disc_Valid() const;

    qint32 getDiscCount() const;
    void setDiscCount(const qint32 &disc_count);
    bool is_disc_count_Set() const;
    bool is_disc_count_Valid() const;

    qint64 getDuration() const;
    void setDuration(const qint64 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getGenre() const;
    void setGenre(const QString &genre);
    bool is_genre_Set() const;
    bool is_genre_Valid() const;

    bool isHasDrm() const;
    void setHasDrm(const bool &has_drm);
    bool is_has_drm_Set() const;
    bool is_has_drm_Valid() const;

    bool isIsVariableBitrate() const;
    void setIsVariableBitrate(const bool &is_variable_bitrate);
    bool is_is_variable_bitrate_Set() const;
    bool is_is_variable_bitrate_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    qint32 getTrack() const;
    void setTrack(const qint32 &track);
    bool is_track_Set() const;
    bool is_track_Valid() const;

    qint32 getTrackCount() const;
    void setTrackCount(const qint32 &track_count);
    bool is_track_count_Set() const;
    bool is_track_count_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();
    Q_DECLARE_PRIVATE(OAIAudio)
    QSharedPointer<OAIAudioPrivate> d_ptr;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAudio)

#endif // OAIAudio_H
