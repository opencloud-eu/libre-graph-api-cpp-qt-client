// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhoto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIPhotoPrivate {
    friend class OAIPhoto;

     QString camera_make;
     bool camera_make_isSet;
     bool camera_make_isValid;

     QString camera_model;
     bool camera_model_isSet;
     bool camera_model_isValid;

     double exposure_denominator;
     bool exposure_denominator_isSet;
     bool exposure_denominator_isValid;

     double exposure_numerator;
     bool exposure_numerator_isSet;
     bool exposure_numerator_isValid;

     double f_number;
     bool f_number_isSet;
     bool f_number_isValid;

     double focal_length;
     bool focal_length_isSet;
     bool focal_length_isValid;

     qint32 iso;
     bool iso_isSet;
     bool iso_isValid;

     qint32 orientation;
     bool orientation_isSet;
     bool orientation_isValid;

     QDateTime taken_date_time;
     bool taken_date_time_isSet;
     bool taken_date_time_isValid;
};

OAIPhoto::OAIPhoto()
    : d_ptr()
{
}

OAIPhoto::OAIPhoto(const OAIPhoto& other)
    : d_ptr(other.d_ptr)
{
}

OAIPhoto::OAIPhoto(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIPhoto::~OAIPhoto() = default;

void OAIPhoto::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIPhotoPrivate{});

        Q_D(OAIPhoto);


        d->camera_make_isSet = false;
        d->camera_make_isValid = false;

        d->camera_model_isSet = false;
        d->camera_model_isValid = false;

        d->exposure_denominator_isSet = false;
        d->exposure_denominator_isValid = false;

        d->exposure_numerator_isSet = false;
        d->exposure_numerator_isValid = false;

        d->f_number_isSet = false;
        d->f_number_isValid = false;

        d->focal_length_isSet = false;
        d->focal_length_isValid = false;

        d->iso_isSet = false;
        d->iso_isValid = false;

        d->orientation_isSet = false;
        d->orientation_isValid = false;

        d->taken_date_time_isSet = false;
        d->taken_date_time_isValid = false;
    }
}

void OAIPhoto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhoto::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIPhoto);

    d->camera_make_isValid = ::OpenAPI::fromJsonValue(d->camera_make, json[QString("cameraMake")]);
    d->camera_make_isSet = !json[QString("cameraMake")].isNull() && d->camera_make_isValid;

    d->camera_model_isValid = ::OpenAPI::fromJsonValue(d->camera_model, json[QString("cameraModel")]);
    d->camera_model_isSet = !json[QString("cameraModel")].isNull() && d->camera_model_isValid;

    d->exposure_denominator_isValid = ::OpenAPI::fromJsonValue(d->exposure_denominator, json[QString("exposureDenominator")]);
    d->exposure_denominator_isSet = !json[QString("exposureDenominator")].isNull() && d->exposure_denominator_isValid;

    d->exposure_numerator_isValid = ::OpenAPI::fromJsonValue(d->exposure_numerator, json[QString("exposureNumerator")]);
    d->exposure_numerator_isSet = !json[QString("exposureNumerator")].isNull() && d->exposure_numerator_isValid;

    d->f_number_isValid = ::OpenAPI::fromJsonValue(d->f_number, json[QString("fNumber")]);
    d->f_number_isSet = !json[QString("fNumber")].isNull() && d->f_number_isValid;

    d->focal_length_isValid = ::OpenAPI::fromJsonValue(d->focal_length, json[QString("focalLength")]);
    d->focal_length_isSet = !json[QString("focalLength")].isNull() && d->focal_length_isValid;

    d->iso_isValid = ::OpenAPI::fromJsonValue(d->iso, json[QString("iso")]);
    d->iso_isSet = !json[QString("iso")].isNull() && d->iso_isValid;

    d->orientation_isValid = ::OpenAPI::fromJsonValue(d->orientation, json[QString("orientation")]);
    d->orientation_isSet = !json[QString("orientation")].isNull() && d->orientation_isValid;

    d->taken_date_time_isValid = ::OpenAPI::fromJsonValue(d->taken_date_time, json[QString("takenDateTime")]);
    d->taken_date_time_isSet = !json[QString("takenDateTime")].isNull() && d->taken_date_time_isValid;
}

QString OAIPhoto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhoto::asJsonObject() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->camera_make_isSet) {
        obj.insert(QString("cameraMake"), ::OpenAPI::toJsonValue(d->camera_make));
    }
    if (d->camera_model_isSet) {
        obj.insert(QString("cameraModel"), ::OpenAPI::toJsonValue(d->camera_model));
    }
    if (d->exposure_denominator_isSet) {
        obj.insert(QString("exposureDenominator"), ::OpenAPI::toJsonValue(d->exposure_denominator));
    }
    if (d->exposure_numerator_isSet) {
        obj.insert(QString("exposureNumerator"), ::OpenAPI::toJsonValue(d->exposure_numerator));
    }
    if (d->f_number_isSet) {
        obj.insert(QString("fNumber"), ::OpenAPI::toJsonValue(d->f_number));
    }
    if (d->focal_length_isSet) {
        obj.insert(QString("focalLength"), ::OpenAPI::toJsonValue(d->focal_length));
    }
    if (d->iso_isSet) {
        obj.insert(QString("iso"), ::OpenAPI::toJsonValue(d->iso));
    }
    if (d->orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(d->orientation));
    }
    if (d->taken_date_time_isSet) {
        obj.insert(QString("takenDateTime"), ::OpenAPI::toJsonValue(d->taken_date_time));
    }
    return obj;
}

QString OAIPhoto::getCameraMake() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->camera_make;
}
void OAIPhoto::setCameraMake(const QString &camera_make) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->camera_make = camera_make;
    d->camera_make_isSet = true;
}

bool OAIPhoto::is_camera_make_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->camera_make_isSet;
}

bool OAIPhoto::is_camera_make_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->camera_make_isValid;
}

QString OAIPhoto::getCameraModel() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->camera_model;
}
void OAIPhoto::setCameraModel(const QString &camera_model) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->camera_model = camera_model;
    d->camera_model_isSet = true;
}

bool OAIPhoto::is_camera_model_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->camera_model_isSet;
}

bool OAIPhoto::is_camera_model_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->camera_model_isValid;
}

double OAIPhoto::getExposureDenominator() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->exposure_denominator;
}
void OAIPhoto::setExposureDenominator(const double &exposure_denominator) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->exposure_denominator = exposure_denominator;
    d->exposure_denominator_isSet = true;
}

bool OAIPhoto::is_exposure_denominator_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->exposure_denominator_isSet;
}

bool OAIPhoto::is_exposure_denominator_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->exposure_denominator_isValid;
}

double OAIPhoto::getExposureNumerator() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->exposure_numerator;
}
void OAIPhoto::setExposureNumerator(const double &exposure_numerator) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->exposure_numerator = exposure_numerator;
    d->exposure_numerator_isSet = true;
}

bool OAIPhoto::is_exposure_numerator_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->exposure_numerator_isSet;
}

bool OAIPhoto::is_exposure_numerator_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->exposure_numerator_isValid;
}

double OAIPhoto::getFNumber() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->f_number;
}
void OAIPhoto::setFNumber(const double &f_number) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->f_number = f_number;
    d->f_number_isSet = true;
}

bool OAIPhoto::is_f_number_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->f_number_isSet;
}

bool OAIPhoto::is_f_number_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->f_number_isValid;
}

double OAIPhoto::getFocalLength() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->focal_length;
}
void OAIPhoto::setFocalLength(const double &focal_length) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->focal_length = focal_length;
    d->focal_length_isSet = true;
}

bool OAIPhoto::is_focal_length_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->focal_length_isSet;
}

bool OAIPhoto::is_focal_length_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->focal_length_isValid;
}

qint32 OAIPhoto::getIso() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->iso;
}
void OAIPhoto::setIso(const qint32 &iso) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->iso = iso;
    d->iso_isSet = true;
}

bool OAIPhoto::is_iso_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->iso_isSet;
}

bool OAIPhoto::is_iso_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->iso_isValid;
}

qint32 OAIPhoto::getOrientation() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->orientation;
}
void OAIPhoto::setOrientation(const qint32 &orientation) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->orientation = orientation;
    d->orientation_isSet = true;
}

bool OAIPhoto::is_orientation_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->orientation_isSet;
}

bool OAIPhoto::is_orientation_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->orientation_isValid;
}

QDateTime OAIPhoto::getTakenDateTime() const {
    Q_D(const OAIPhoto);
    if(!d){
        return {};
    }
    return d->taken_date_time;
}
void OAIPhoto::setTakenDateTime(const QDateTime &taken_date_time) {
    Q_D(OAIPhoto);
    Q_ASSERT(d);

    d->taken_date_time = taken_date_time;
    d->taken_date_time_isSet = true;
}

bool OAIPhoto::is_taken_date_time_Set() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }

    return d->taken_date_time_isSet;
}

bool OAIPhoto::is_taken_date_time_Valid() const{
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    return d->taken_date_time_isValid;
}

bool OAIPhoto::isSet() const {
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->camera_make_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->camera_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->exposure_denominator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->exposure_numerator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->f_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->focal_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->iso_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->taken_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhoto::isValid() const {
    Q_D(const OAIPhoto);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
