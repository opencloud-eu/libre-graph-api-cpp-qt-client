// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity_times.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIActivity_timesPrivate {
    friend class OAIActivity_times;

     QDateTime recorded_time;
     bool recorded_time_isSet;
     bool recorded_time_isValid;
};

OAIActivity_times::OAIActivity_times()
    : d_ptr()
{
}

OAIActivity_times::OAIActivity_times(const OAIActivity_times& other)
    : d_ptr(other.d_ptr)
{
}

OAIActivity_times::OAIActivity_times(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIActivity_times::~OAIActivity_times() = default;

void OAIActivity_times::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIActivity_timesPrivate{});

        Q_D(OAIActivity_times);


        d->recorded_time_isSet = false;
        d->recorded_time_isValid = false;
    }
}

void OAIActivity_times::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity_times::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIActivity_times);

    d->recorded_time_isValid = ::OpenAPI::fromJsonValue(d->recorded_time, json[QString("recordedTime")]);
    d->recorded_time_isSet = !json[QString("recordedTime")].isNull() && d->recorded_time_isValid;
}

QString OAIActivity_times::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity_times::asJsonObject() const {
    Q_D(const OAIActivity_times);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->recorded_time_isSet) {
        obj.insert(QString("recordedTime"), ::OpenAPI::toJsonValue(d->recorded_time));
    }
    return obj;
}

QDateTime OAIActivity_times::getRecordedTime() const {
    Q_D(const OAIActivity_times);
    if(!d){
        return {};
    }
    return d->recorded_time;
}
void OAIActivity_times::setRecordedTime(const QDateTime &recorded_time) {
    Q_D(OAIActivity_times);
    Q_ASSERT(d);

    d->recorded_time = recorded_time;
    d->recorded_time_isSet = true;
}

bool OAIActivity_times::is_recorded_time_Set() const{
    Q_D(const OAIActivity_times);
    if(!d){
        return false;
    }

    return d->recorded_time_isSet;
}

bool OAIActivity_times::is_recorded_time_Valid() const{
    Q_D(const OAIActivity_times);
    if(!d){
        return false;
    }
    return d->recorded_time_isValid;
}

bool OAIActivity_times::isSet() const {
    Q_D(const OAIActivity_times);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->recorded_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity_times::isValid() const {
    Q_D(const OAIActivity_times);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return d->recorded_time_isValid && true;
}

} // namespace OpenAPI
