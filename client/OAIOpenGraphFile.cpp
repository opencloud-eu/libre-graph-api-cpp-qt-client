/**
 * Libre Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.3.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenGraphFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenGraphFile::OAIOpenGraphFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenGraphFile::OAIOpenGraphFile() {
    this->initializeModel();
}

OAIOpenGraphFile::~OAIOpenGraphFile() {}

void OAIOpenGraphFile::initializeModel() {

    m_hashes_isSet = false;
    m_hashes_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_processing_metadata_isSet = false;
    m_processing_metadata_isValid = false;
}

void OAIOpenGraphFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenGraphFile::fromJsonObject(QJsonObject json) {

    m_hashes_isValid = ::OpenAPI::fromJsonValue(hashes, json[QString("hashes")]);
    m_hashes_isSet = !json[QString("hashes")].isNull() && m_hashes_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_processing_metadata_isValid = ::OpenAPI::fromJsonValue(processing_metadata, json[QString("processingMetadata")]);
    m_processing_metadata_isSet = !json[QString("processingMetadata")].isNull() && m_processing_metadata_isValid;
}

QString OAIOpenGraphFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenGraphFile::asJsonObject() const {
    QJsonObject obj;
    if (hashes.isSet()) {
        obj.insert(QString("hashes"), ::OpenAPI::toJsonValue(hashes));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(mime_type));
    }
    if (m_processing_metadata_isSet) {
        obj.insert(QString("processingMetadata"), ::OpenAPI::toJsonValue(processing_metadata));
    }
    return obj;
}

OAIHashes OAIOpenGraphFile::getHashes() const {
    return hashes;
}
void OAIOpenGraphFile::setHashes(const OAIHashes &hashes) {
    this->hashes = hashes;
    this->m_hashes_isSet = true;
}

bool OAIOpenGraphFile::is_hashes_Set() const{
    return m_hashes_isSet;
}

bool OAIOpenGraphFile::is_hashes_Valid() const{
    return m_hashes_isValid;
}

QString OAIOpenGraphFile::getMimeType() const {
    return mime_type;
}
void OAIOpenGraphFile::setMimeType(const QString &mime_type) {
    this->mime_type = mime_type;
    this->m_mime_type_isSet = true;
}

bool OAIOpenGraphFile::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIOpenGraphFile::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIOpenGraphFile::isProcessingMetadata() const {
    return processing_metadata;
}
void OAIOpenGraphFile::setProcessingMetadata(const bool &processing_metadata) {
    this->processing_metadata = processing_metadata;
    this->m_processing_metadata_isSet = true;
}

bool OAIOpenGraphFile::is_processing_metadata_Set() const{
    return m_processing_metadata_isSet;
}

bool OAIOpenGraphFile::is_processing_metadata_Valid() const{
    return m_processing_metadata_isValid;
}

bool OAIOpenGraphFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (hashes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenGraphFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
