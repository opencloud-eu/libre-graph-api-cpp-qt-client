// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity_template.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIActivity_templatePrivate {
    friend class OAIActivity_template;

     QString message;
     bool message_isSet;
     bool message_isValid;

     OAIObject variables;
     bool variables_isSet;
     bool variables_isValid;
};

OAIActivity_template::OAIActivity_template()
    : d_ptr()
{
}

OAIActivity_template::OAIActivity_template(const OAIActivity_template& other)
    : d_ptr(other.d_ptr)
{
}

OAIActivity_template::OAIActivity_template(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIActivity_template::~OAIActivity_template() = default;

void OAIActivity_template::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIActivity_templatePrivate{});

        Q_D(OAIActivity_template);


        d->message_isSet = false;
        d->message_isValid = false;

        d->variables_isSet = false;
        d->variables_isValid = false;
    }
}

void OAIActivity_template::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity_template::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIActivity_template);

    d->message_isValid = ::OpenAPI::fromJsonValue(d->message, json[QString("message")]);
    d->message_isSet = !json[QString("message")].isNull() && d->message_isValid;

    d->variables_isValid = ::OpenAPI::fromJsonValue(d->variables, json[QString("variables")]);
    d->variables_isSet = !json[QString("variables")].isNull() && d->variables_isValid;
}

QString OAIActivity_template::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity_template::asJsonObject() const {
    Q_D(const OAIActivity_template);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(d->message));
    }
    if (d->variables_isSet) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(d->variables));
    }
    return obj;
}

QString OAIActivity_template::getMessage() const {
    Q_D(const OAIActivity_template);
    if(!d){
        return {};
    }
    return d->message;
}
void OAIActivity_template::setMessage(const QString &message) {
    Q_D(OAIActivity_template);
    Q_ASSERT(d);

    d->message = message;
    d->message_isSet = true;
}

bool OAIActivity_template::is_message_Set() const{
    Q_D(const OAIActivity_template);
    if(!d){
        return false;
    }

    return d->message_isSet;
}

bool OAIActivity_template::is_message_Valid() const{
    Q_D(const OAIActivity_template);
    if(!d){
        return false;
    }
    return d->message_isValid;
}

OAIObject OAIActivity_template::getVariables() const {
    Q_D(const OAIActivity_template);
    if(!d){
        return {};
    }
    return d->variables;
}
void OAIActivity_template::setVariables(const OAIObject &variables) {
    Q_D(OAIActivity_template);
    Q_ASSERT(d);

    d->variables = variables;
    d->variables_isSet = true;
}

bool OAIActivity_template::is_variables_Set() const{
    Q_D(const OAIActivity_template);
    if(!d){
        return false;
    }

    return d->variables_isSet;
}

bool OAIActivity_template::is_variables_Valid() const{
    Q_D(const OAIActivity_template);
    if(!d){
        return false;
    }
    return d->variables_isValid;
}

bool OAIActivity_template::isSet() const {
    Q_D(const OAIActivity_template);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->variables_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity_template::isValid() const {
    Q_D(const OAIActivity_template);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return d->message_isValid && true;
}

} // namespace OpenAPI
