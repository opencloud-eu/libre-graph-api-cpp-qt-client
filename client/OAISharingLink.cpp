// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharingLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAISharingLinkPrivate {
    friend class OAISharingLink;

     OAISharingLinkType type;
     bool type_isSet;
     bool type_isValid;

     bool prevents_download;
     bool prevents_download_isSet;
     bool prevents_download_isValid;

     QString web_url;
     bool web_url_isSet;
     bool web_url_isValid;

     QString libre_graph_display_name;
     bool libre_graph_display_name_isSet;
     bool libre_graph_display_name_isValid;

     bool libre_graph_quick_link;
     bool libre_graph_quick_link_isSet;
     bool libre_graph_quick_link_isValid;
};

OAISharingLink::OAISharingLink()
    : d_ptr()
{
}

OAISharingLink::OAISharingLink(const OAISharingLink& other)
    : d_ptr(other.d_ptr)
{
}

OAISharingLink::OAISharingLink(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAISharingLink::~OAISharingLink() = default;

void OAISharingLink::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAISharingLinkPrivate{});

        Q_D(OAISharingLink);


        d->type_isSet = false;
        d->type_isValid = false;

        d->prevents_download_isSet = false;
        d->prevents_download_isValid = false;

        d->web_url_isSet = false;
        d->web_url_isValid = false;

        d->libre_graph_display_name_isSet = false;
        d->libre_graph_display_name_isValid = false;

        d->libre_graph_quick_link_isSet = false;
        d->libre_graph_quick_link_isValid = false;
    }
}

void OAISharingLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharingLink::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAISharingLink);

    d->type_isValid = ::OpenAPI::fromJsonValue(d->type, json[QString("type")]);
    d->type_isSet = !json[QString("type")].isNull() && d->type_isValid;

    d->prevents_download_isValid = ::OpenAPI::fromJsonValue(d->prevents_download, json[QString("preventsDownload")]);
    d->prevents_download_isSet = !json[QString("preventsDownload")].isNull() && d->prevents_download_isValid;

    d->web_url_isValid = ::OpenAPI::fromJsonValue(d->web_url, json[QString("webUrl")]);
    d->web_url_isSet = !json[QString("webUrl")].isNull() && d->web_url_isValid;

    d->libre_graph_display_name_isValid = ::OpenAPI::fromJsonValue(d->libre_graph_display_name, json[QString("@libre.graph.displayName")]);
    d->libre_graph_display_name_isSet = !json[QString("@libre.graph.displayName")].isNull() && d->libre_graph_display_name_isValid;

    d->libre_graph_quick_link_isValid = ::OpenAPI::fromJsonValue(d->libre_graph_quick_link, json[QString("@libre.graph.quickLink")]);
    d->libre_graph_quick_link_isSet = !json[QString("@libre.graph.quickLink")].isNull() && d->libre_graph_quick_link_isValid;
}

QString OAISharingLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharingLink::asJsonObject() const {
    Q_D(const OAISharingLink);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(d->type));
    }
    if (d->prevents_download_isSet) {
        obj.insert(QString("preventsDownload"), ::OpenAPI::toJsonValue(d->prevents_download));
    }
    if (d->web_url_isSet) {
        obj.insert(QString("webUrl"), ::OpenAPI::toJsonValue(d->web_url));
    }
    if (d->libre_graph_display_name_isSet) {
        obj.insert(QString("@libre.graph.displayName"), ::OpenAPI::toJsonValue(d->libre_graph_display_name));
    }
    if (d->libre_graph_quick_link_isSet) {
        obj.insert(QString("@libre.graph.quickLink"), ::OpenAPI::toJsonValue(d->libre_graph_quick_link));
    }
    return obj;
}

OAISharingLinkType OAISharingLink::getType() const {
    Q_D(const OAISharingLink);
    if(!d){
        return {};
    }
    return d->type;
}
void OAISharingLink::setType(const OAISharingLinkType &type) {
    Q_D(OAISharingLink);
    Q_ASSERT(d);

    d->type = type;
    d->type_isSet = true;
}

bool OAISharingLink::is_type_Set() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }

    return d->type_isSet;
}

bool OAISharingLink::is_type_Valid() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    return d->type_isValid;
}

bool OAISharingLink::isPreventsDownload() const {
    Q_D(const OAISharingLink);
    if(!d){
        return {};
    }
    return d->prevents_download;
}
void OAISharingLink::setPreventsDownload(const bool &prevents_download) {
    Q_D(OAISharingLink);
    Q_ASSERT(d);

    d->prevents_download = prevents_download;
    d->prevents_download_isSet = true;
}

bool OAISharingLink::is_prevents_download_Set() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }

    return d->prevents_download_isSet;
}

bool OAISharingLink::is_prevents_download_Valid() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    return d->prevents_download_isValid;
}

QString OAISharingLink::getWebUrl() const {
    Q_D(const OAISharingLink);
    if(!d){
        return {};
    }
    return d->web_url;
}
void OAISharingLink::setWebUrl(const QString &web_url) {
    Q_D(OAISharingLink);
    Q_ASSERT(d);

    d->web_url = web_url;
    d->web_url_isSet = true;
}

bool OAISharingLink::is_web_url_Set() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }

    return d->web_url_isSet;
}

bool OAISharingLink::is_web_url_Valid() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    return d->web_url_isValid;
}

QString OAISharingLink::getLibreGraphDisplayName() const {
    Q_D(const OAISharingLink);
    if(!d){
        return {};
    }
    return d->libre_graph_display_name;
}
void OAISharingLink::setLibreGraphDisplayName(const QString &libre_graph_display_name) {
    Q_D(OAISharingLink);
    Q_ASSERT(d);

    d->libre_graph_display_name = libre_graph_display_name;
    d->libre_graph_display_name_isSet = true;
}

bool OAISharingLink::is_libre_graph_display_name_Set() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }

    return d->libre_graph_display_name_isSet;
}

bool OAISharingLink::is_libre_graph_display_name_Valid() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    return d->libre_graph_display_name_isValid;
}

bool OAISharingLink::isLibreGraphQuickLink() const {
    Q_D(const OAISharingLink);
    if(!d){
        return {};
    }
    return d->libre_graph_quick_link;
}
void OAISharingLink::setLibreGraphQuickLink(const bool &libre_graph_quick_link) {
    Q_D(OAISharingLink);
    Q_ASSERT(d);

    d->libre_graph_quick_link = libre_graph_quick_link;
    d->libre_graph_quick_link_isSet = true;
}

bool OAISharingLink::is_libre_graph_quick_link_Set() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }

    return d->libre_graph_quick_link_isSet;
}

bool OAISharingLink::is_libre_graph_quick_link_Valid() const{
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    return d->libre_graph_quick_link_isValid;
}

bool OAISharingLink::isSet() const {
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->prevents_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->web_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->libre_graph_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->libre_graph_quick_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharingLink::isValid() const {
    Q_D(const OAISharingLink);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
