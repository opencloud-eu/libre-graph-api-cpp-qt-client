// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoCoordinates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIGeoCoordinatesPrivate {
    friend class OAIGeoCoordinates;

     double altitude;
     bool altitude_isSet;
     bool altitude_isValid;

     double latitude;
     bool latitude_isSet;
     bool latitude_isValid;

     double longitude;
     bool longitude_isSet;
     bool longitude_isValid;
};

OAIGeoCoordinates::OAIGeoCoordinates()
    : d_ptr()
{
}

OAIGeoCoordinates::OAIGeoCoordinates(const OAIGeoCoordinates& other)
    : d_ptr(other.d_ptr)
{
}

OAIGeoCoordinates::OAIGeoCoordinates(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIGeoCoordinates::~OAIGeoCoordinates() = default;

void OAIGeoCoordinates::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIGeoCoordinatesPrivate{});

        Q_D(OAIGeoCoordinates);


        d->altitude_isSet = false;
        d->altitude_isValid = false;

        d->latitude_isSet = false;
        d->latitude_isValid = false;

        d->longitude_isSet = false;
        d->longitude_isValid = false;
    }
}

void OAIGeoCoordinates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoCoordinates::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIGeoCoordinates);

    d->altitude_isValid = ::OpenAPI::fromJsonValue(d->altitude, json[QString("altitude")]);
    d->altitude_isSet = !json[QString("altitude")].isNull() && d->altitude_isValid;

    d->latitude_isValid = ::OpenAPI::fromJsonValue(d->latitude, json[QString("latitude")]);
    d->latitude_isSet = !json[QString("latitude")].isNull() && d->latitude_isValid;

    d->longitude_isValid = ::OpenAPI::fromJsonValue(d->longitude, json[QString("longitude")]);
    d->longitude_isSet = !json[QString("longitude")].isNull() && d->longitude_isValid;
}

QString OAIGeoCoordinates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoCoordinates::asJsonObject() const {
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(d->altitude));
    }
    if (d->latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(d->latitude));
    }
    if (d->longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(d->longitude));
    }
    return obj;
}

double OAIGeoCoordinates::getAltitude() const {
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return {};
    }
    return d->altitude;
}
void OAIGeoCoordinates::setAltitude(const double &altitude) {
    Q_D(OAIGeoCoordinates);
    Q_ASSERT(d);

    d->altitude = altitude;
    d->altitude_isSet = true;
}

bool OAIGeoCoordinates::is_altitude_Set() const{
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }

    return d->altitude_isSet;
}

bool OAIGeoCoordinates::is_altitude_Valid() const{
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }
    return d->altitude_isValid;
}

double OAIGeoCoordinates::getLatitude() const {
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return {};
    }
    return d->latitude;
}
void OAIGeoCoordinates::setLatitude(const double &latitude) {
    Q_D(OAIGeoCoordinates);
    Q_ASSERT(d);

    d->latitude = latitude;
    d->latitude_isSet = true;
}

bool OAIGeoCoordinates::is_latitude_Set() const{
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }

    return d->latitude_isSet;
}

bool OAIGeoCoordinates::is_latitude_Valid() const{
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }
    return d->latitude_isValid;
}

double OAIGeoCoordinates::getLongitude() const {
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return {};
    }
    return d->longitude;
}
void OAIGeoCoordinates::setLongitude(const double &longitude) {
    Q_D(OAIGeoCoordinates);
    Q_ASSERT(d);

    d->longitude = longitude;
    d->longitude_isSet = true;
}

bool OAIGeoCoordinates::is_longitude_Set() const{
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }

    return d->longitude_isSet;
}

bool OAIGeoCoordinates::is_longitude_Valid() const{
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }
    return d->longitude_isValid;
}

bool OAIGeoCoordinates::isSet() const {
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoCoordinates::isValid() const {
    Q_D(const OAIGeoCoordinates);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
