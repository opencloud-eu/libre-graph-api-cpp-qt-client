// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThumbnailSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIThumbnailSetPrivate {
    friend class OAIThumbnailSet;

     QString id;
     bool id_isSet;
     bool id_isValid;

     OAIThumbnail large;
     bool large_isSet;
     bool large_isValid;

     OAIThumbnail medium;
     bool medium_isSet;
     bool medium_isValid;

     OAIThumbnail small;
     bool small_isSet;
     bool small_isValid;

     OAIThumbnail source;
     bool source_isSet;
     bool source_isValid;
};

OAIThumbnailSet::OAIThumbnailSet()
    : d_ptr()
{
}

OAIThumbnailSet::OAIThumbnailSet(const OAIThumbnailSet& other)
    : d_ptr(other.d_ptr)
{
}

OAIThumbnailSet::OAIThumbnailSet(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIThumbnailSet::~OAIThumbnailSet() = default;

void OAIThumbnailSet::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIThumbnailSetPrivate{});

        Q_D(OAIThumbnailSet);


        d->id_isSet = false;
        d->id_isValid = false;

        d->large_isSet = false;
        d->large_isValid = false;

        d->medium_isSet = false;
        d->medium_isValid = false;

        d->small_isSet = false;
        d->small_isValid = false;

        d->source_isSet = false;
        d->source_isValid = false;
    }
}

void OAIThumbnailSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThumbnailSet::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIThumbnailSet);

    d->id_isValid = ::OpenAPI::fromJsonValue(d->id, json[QString("id")]);
    d->id_isSet = !json[QString("id")].isNull() && d->id_isValid;

    d->large_isValid = ::OpenAPI::fromJsonValue(d->large, json[QString("large")]);
    d->large_isSet = !json[QString("large")].isNull() && d->large_isValid;

    d->medium_isValid = ::OpenAPI::fromJsonValue(d->medium, json[QString("medium")]);
    d->medium_isSet = !json[QString("medium")].isNull() && d->medium_isValid;

    d->small_isValid = ::OpenAPI::fromJsonValue(d->small, json[QString("small")]);
    d->small_isSet = !json[QString("small")].isNull() && d->small_isValid;

    d->source_isValid = ::OpenAPI::fromJsonValue(d->source, json[QString("source")]);
    d->source_isSet = !json[QString("source")].isNull() && d->source_isValid;
}

QString OAIThumbnailSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThumbnailSet::asJsonObject() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(d->id));
    }
    if (d->large.isSet()) {
        obj.insert(QString("large"), ::OpenAPI::toJsonValue(d->large));
    }
    if (d->medium.isSet()) {
        obj.insert(QString("medium"), ::OpenAPI::toJsonValue(d->medium));
    }
    if (d->small.isSet()) {
        obj.insert(QString("small"), ::OpenAPI::toJsonValue(d->small));
    }
    if (d->source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(d->source));
    }
    return obj;
}

QString OAIThumbnailSet::getId() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return {};
    }
    return d->id;
}
void OAIThumbnailSet::setId(const QString &id) {
    Q_D(OAIThumbnailSet);
    Q_ASSERT(d);

    d->id = id;
    d->id_isSet = true;
}

bool OAIThumbnailSet::is_id_Set() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }

    return d->id_isSet;
}

bool OAIThumbnailSet::is_id_Valid() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    return d->id_isValid;
}

OAIThumbnail OAIThumbnailSet::getLarge() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return {};
    }
    return d->large;
}
void OAIThumbnailSet::setLarge(const OAIThumbnail &large) {
    Q_D(OAIThumbnailSet);
    Q_ASSERT(d);

    d->large = large;
    d->large_isSet = true;
}

bool OAIThumbnailSet::is_large_Set() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }

    return d->large_isSet;
}

bool OAIThumbnailSet::is_large_Valid() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    return d->large_isValid;
}

OAIThumbnail OAIThumbnailSet::getMedium() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return {};
    }
    return d->medium;
}
void OAIThumbnailSet::setMedium(const OAIThumbnail &medium) {
    Q_D(OAIThumbnailSet);
    Q_ASSERT(d);

    d->medium = medium;
    d->medium_isSet = true;
}

bool OAIThumbnailSet::is_medium_Set() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }

    return d->medium_isSet;
}

bool OAIThumbnailSet::is_medium_Valid() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    return d->medium_isValid;
}

OAIThumbnail OAIThumbnailSet::getSmall() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return {};
    }
    return d->small;
}
void OAIThumbnailSet::setSmall(const OAIThumbnail &small) {
    Q_D(OAIThumbnailSet);
    Q_ASSERT(d);

    d->small = small;
    d->small_isSet = true;
}

bool OAIThumbnailSet::is_small_Set() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }

    return d->small_isSet;
}

bool OAIThumbnailSet::is_small_Valid() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    return d->small_isValid;
}

OAIThumbnail OAIThumbnailSet::getSource() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return {};
    }
    return d->source;
}
void OAIThumbnailSet::setSource(const OAIThumbnail &source) {
    Q_D(OAIThumbnailSet);
    Q_ASSERT(d);

    d->source = source;
    d->source_isSet = true;
}

bool OAIThumbnailSet::is_source_Set() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }

    return d->source_isSet;
}

bool OAIThumbnailSet::is_source_Valid() const{
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    return d->source_isValid;
}

bool OAIThumbnailSet::isSet() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->large.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->medium.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->small.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThumbnailSet::isValid() const {
    Q_D(const OAIThumbnailSet);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
