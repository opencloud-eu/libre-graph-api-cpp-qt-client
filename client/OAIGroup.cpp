// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.11.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIGroupPrivate {
    friend class OAIGroup;

     QString id;
     bool id_isSet;
     bool id_isValid;

     QDateTime deleted_date_time;
     bool deleted_date_time_isSet;
     bool deleted_date_time_isValid;

     QDateTime created_date_time;
     bool created_date_time_isSet;
     bool created_date_time_isValid;

     QString description;
     bool description_isSet;
     bool description_isValid;

     QString display_name;
     bool display_name_isSet;
     bool display_name_isValid;

     QDateTime expiration_date_time;
     bool expiration_date_time_isSet;
     bool expiration_date_time_isValid;

     QString mail;
     bool mail_isSet;
     bool mail_isValid;

     QString on_premises_domain_name;
     bool on_premises_domain_name_isSet;
     bool on_premises_domain_name_isValid;

     QDateTime on_premises_last_sync_date_time;
     bool on_premises_last_sync_date_time_isSet;
     bool on_premises_last_sync_date_time_isValid;

     QString on_premises_sam_account_name;
     bool on_premises_sam_account_name_isSet;
     bool on_premises_sam_account_name_isValid;

     bool on_premises_sync_enabled;
     bool on_premises_sync_enabled_isSet;
     bool on_premises_sync_enabled_isValid;

     QString preferred_language;
     bool preferred_language_isSet;
     bool preferred_language_isValid;

     bool security_enabled;
     bool security_enabled_isSet;
     bool security_enabled_isValid;

     QString security_identifier;
     bool security_identifier_isSet;
     bool security_identifier_isValid;

     QString visibility;
     bool visibility_isSet;
     bool visibility_isValid;

     OAIDirectoryObject created_on_behalf_of;
     bool created_on_behalf_of_isSet;
     bool created_on_behalf_of_isValid;

     QList<OAIDirectoryObject> member_of;
     bool member_of_isSet;
     bool member_of_isValid;

     QList<OAIDirectoryObject> members;
     bool members_isSet;
     bool members_isValid;

     QList<OAIDirectoryObject> owners;
     bool owners_isSet;
     bool owners_isValid;

     OAIDrive drive;
     bool drive_isSet;
     bool drive_isValid;

     QList<OAIDrive> drives;
     bool drives_isSet;
     bool drives_isValid;

     bool is_archived;
     bool is_archived_isSet;
     bool is_archived_isValid;

     QSet<QString> membersodata_bind;
     bool membersodata_bind_isSet;
     bool membersodata_bind_isValid;
};

OAIGroup::OAIGroup()
    : d_ptr()
{
}

OAIGroup::OAIGroup(const OAIGroup& other)
    : d_ptr(other.d_ptr)
{
}

OAIGroup::OAIGroup(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIGroup::~OAIGroup() = default;

void OAIGroup::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIGroupPrivate{});

        Q_D(OAIGroup);


        d->id_isSet = false;
        d->id_isValid = false;

        d->deleted_date_time_isSet = false;
        d->deleted_date_time_isValid = false;

        d->created_date_time_isSet = false;
        d->created_date_time_isValid = false;

        d->description_isSet = false;
        d->description_isValid = false;

        d->display_name_isSet = false;
        d->display_name_isValid = false;

        d->expiration_date_time_isSet = false;
        d->expiration_date_time_isValid = false;

        d->mail_isSet = false;
        d->mail_isValid = false;

        d->on_premises_domain_name_isSet = false;
        d->on_premises_domain_name_isValid = false;

        d->on_premises_last_sync_date_time_isSet = false;
        d->on_premises_last_sync_date_time_isValid = false;

        d->on_premises_sam_account_name_isSet = false;
        d->on_premises_sam_account_name_isValid = false;

        d->on_premises_sync_enabled_isSet = false;
        d->on_premises_sync_enabled_isValid = false;

        d->preferred_language_isSet = false;
        d->preferred_language_isValid = false;

        d->security_enabled_isSet = false;
        d->security_enabled_isValid = false;

        d->security_identifier_isSet = false;
        d->security_identifier_isValid = false;

        d->visibility_isSet = false;
        d->visibility_isValid = false;

        d->created_on_behalf_of_isSet = false;
        d->created_on_behalf_of_isValid = false;

        d->member_of_isSet = false;
        d->member_of_isValid = false;

        d->members_isSet = false;
        d->members_isValid = false;

        d->owners_isSet = false;
        d->owners_isValid = false;

        d->drive_isSet = false;
        d->drive_isValid = false;

        d->drives_isSet = false;
        d->drives_isValid = false;

        d->is_archived_isSet = false;
        d->is_archived_isValid = false;

        d->membersodata_bind_isSet = false;
        d->membersodata_bind_isValid = false;
    }
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIGroup);

    d->id_isValid = ::OpenAPI::fromJsonValue(d->id, json[QString("id")]);
    d->id_isSet = !json[QString("id")].isNull() && d->id_isValid;

    d->deleted_date_time_isValid = ::OpenAPI::fromJsonValue(d->deleted_date_time, json[QString("deletedDateTime")]);
    d->deleted_date_time_isSet = !json[QString("deletedDateTime")].isNull() && d->deleted_date_time_isValid;

    d->created_date_time_isValid = ::OpenAPI::fromJsonValue(d->created_date_time, json[QString("createdDateTime")]);
    d->created_date_time_isSet = !json[QString("createdDateTime")].isNull() && d->created_date_time_isValid;

    d->description_isValid = ::OpenAPI::fromJsonValue(d->description, json[QString("description")]);
    d->description_isSet = !json[QString("description")].isNull() && d->description_isValid;

    d->display_name_isValid = ::OpenAPI::fromJsonValue(d->display_name, json[QString("displayName")]);
    d->display_name_isSet = !json[QString("displayName")].isNull() && d->display_name_isValid;

    d->expiration_date_time_isValid = ::OpenAPI::fromJsonValue(d->expiration_date_time, json[QString("expirationDateTime")]);
    d->expiration_date_time_isSet = !json[QString("expirationDateTime")].isNull() && d->expiration_date_time_isValid;

    d->mail_isValid = ::OpenAPI::fromJsonValue(d->mail, json[QString("mail")]);
    d->mail_isSet = !json[QString("mail")].isNull() && d->mail_isValid;

    d->on_premises_domain_name_isValid = ::OpenAPI::fromJsonValue(d->on_premises_domain_name, json[QString("onPremisesDomainName")]);
    d->on_premises_domain_name_isSet = !json[QString("onPremisesDomainName")].isNull() && d->on_premises_domain_name_isValid;

    d->on_premises_last_sync_date_time_isValid = ::OpenAPI::fromJsonValue(d->on_premises_last_sync_date_time, json[QString("onPremisesLastSyncDateTime")]);
    d->on_premises_last_sync_date_time_isSet = !json[QString("onPremisesLastSyncDateTime")].isNull() && d->on_premises_last_sync_date_time_isValid;

    d->on_premises_sam_account_name_isValid = ::OpenAPI::fromJsonValue(d->on_premises_sam_account_name, json[QString("onPremisesSamAccountName")]);
    d->on_premises_sam_account_name_isSet = !json[QString("onPremisesSamAccountName")].isNull() && d->on_premises_sam_account_name_isValid;

    d->on_premises_sync_enabled_isValid = ::OpenAPI::fromJsonValue(d->on_premises_sync_enabled, json[QString("onPremisesSyncEnabled")]);
    d->on_premises_sync_enabled_isSet = !json[QString("onPremisesSyncEnabled")].isNull() && d->on_premises_sync_enabled_isValid;

    d->preferred_language_isValid = ::OpenAPI::fromJsonValue(d->preferred_language, json[QString("preferredLanguage")]);
    d->preferred_language_isSet = !json[QString("preferredLanguage")].isNull() && d->preferred_language_isValid;

    d->security_enabled_isValid = ::OpenAPI::fromJsonValue(d->security_enabled, json[QString("securityEnabled")]);
    d->security_enabled_isSet = !json[QString("securityEnabled")].isNull() && d->security_enabled_isValid;

    d->security_identifier_isValid = ::OpenAPI::fromJsonValue(d->security_identifier, json[QString("securityIdentifier")]);
    d->security_identifier_isSet = !json[QString("securityIdentifier")].isNull() && d->security_identifier_isValid;

    d->visibility_isValid = ::OpenAPI::fromJsonValue(d->visibility, json[QString("visibility")]);
    d->visibility_isSet = !json[QString("visibility")].isNull() && d->visibility_isValid;

    d->created_on_behalf_of_isValid = ::OpenAPI::fromJsonValue(d->created_on_behalf_of, json[QString("createdOnBehalfOf")]);
    d->created_on_behalf_of_isSet = !json[QString("createdOnBehalfOf")].isNull() && d->created_on_behalf_of_isValid;

    d->member_of_isValid = ::OpenAPI::fromJsonValue(d->member_of, json[QString("memberOf")]);
    d->member_of_isSet = !json[QString("memberOf")].isNull() && d->member_of_isValid;

    d->members_isValid = ::OpenAPI::fromJsonValue(d->members, json[QString("members")]);
    d->members_isSet = !json[QString("members")].isNull() && d->members_isValid;

    d->owners_isValid = ::OpenAPI::fromJsonValue(d->owners, json[QString("owners")]);
    d->owners_isSet = !json[QString("owners")].isNull() && d->owners_isValid;

    d->drive_isValid = ::OpenAPI::fromJsonValue(d->drive, json[QString("drive")]);
    d->drive_isSet = !json[QString("drive")].isNull() && d->drive_isValid;

    d->drives_isValid = ::OpenAPI::fromJsonValue(d->drives, json[QString("drives")]);
    d->drives_isSet = !json[QString("drives")].isNull() && d->drives_isValid;

    d->is_archived_isValid = ::OpenAPI::fromJsonValue(d->is_archived, json[QString("isArchived")]);
    d->is_archived_isSet = !json[QString("isArchived")].isNull() && d->is_archived_isValid;

    d->membersodata_bind_isValid = ::OpenAPI::fromJsonValue(d->membersodata_bind, json[QString("members@odata.bind")]);
    d->membersodata_bind_isSet = !json[QString("members@odata.bind")].isNull() && d->membersodata_bind_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(d->id));
    }
    if (d->deleted_date_time_isSet) {
        obj.insert(QString("deletedDateTime"), ::OpenAPI::toJsonValue(d->deleted_date_time));
    }
    if (d->created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(d->created_date_time));
    }
    if (d->description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(d->description));
    }
    if (d->display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(d->display_name));
    }
    if (d->expiration_date_time_isSet) {
        obj.insert(QString("expirationDateTime"), ::OpenAPI::toJsonValue(d->expiration_date_time));
    }
    if (d->mail_isSet) {
        obj.insert(QString("mail"), ::OpenAPI::toJsonValue(d->mail));
    }
    if (d->on_premises_domain_name_isSet) {
        obj.insert(QString("onPremisesDomainName"), ::OpenAPI::toJsonValue(d->on_premises_domain_name));
    }
    if (d->on_premises_last_sync_date_time_isSet) {
        obj.insert(QString("onPremisesLastSyncDateTime"), ::OpenAPI::toJsonValue(d->on_premises_last_sync_date_time));
    }
    if (d->on_premises_sam_account_name_isSet) {
        obj.insert(QString("onPremisesSamAccountName"), ::OpenAPI::toJsonValue(d->on_premises_sam_account_name));
    }
    if (d->on_premises_sync_enabled_isSet) {
        obj.insert(QString("onPremisesSyncEnabled"), ::OpenAPI::toJsonValue(d->on_premises_sync_enabled));
    }
    if (d->preferred_language_isSet) {
        obj.insert(QString("preferredLanguage"), ::OpenAPI::toJsonValue(d->preferred_language));
    }
    if (d->security_enabled_isSet) {
        obj.insert(QString("securityEnabled"), ::OpenAPI::toJsonValue(d->security_enabled));
    }
    if (d->security_identifier_isSet) {
        obj.insert(QString("securityIdentifier"), ::OpenAPI::toJsonValue(d->security_identifier));
    }
    if (d->visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(d->visibility));
    }
    if (d->created_on_behalf_of.isSet()) {
        obj.insert(QString("createdOnBehalfOf"), ::OpenAPI::toJsonValue(d->created_on_behalf_of));
    }
    if (d->member_of.size() > 0) {
        obj.insert(QString("memberOf"), ::OpenAPI::toJsonValue(d->member_of));
    }
    if (d->members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(d->members));
    }
    if (d->owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(d->owners));
    }
    if (d->drive.isSet()) {
        obj.insert(QString("drive"), ::OpenAPI::toJsonValue(d->drive));
    }
    if (d->drives.size() > 0) {
        obj.insert(QString("drives"), ::OpenAPI::toJsonValue(d->drives));
    }
    if (d->is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(d->is_archived));
    }
    if (d->membersodata_bind.size() > 0) {
        obj.insert(QString("members@odata.bind"), ::OpenAPI::toJsonValue(d->membersodata_bind));
    }
    return obj;
}

QString OAIGroup::getId() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->id;
}
void OAIGroup::setId(const QString &id) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->id = id;
    d->id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->id_isValid;
}

QDateTime OAIGroup::getDeletedDateTime() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->deleted_date_time;
}
void OAIGroup::setDeletedDateTime(const QDateTime &deleted_date_time) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->deleted_date_time = deleted_date_time;
    d->deleted_date_time_isSet = true;
}

bool OAIGroup::is_deleted_date_time_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->deleted_date_time_isSet;
}

bool OAIGroup::is_deleted_date_time_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->deleted_date_time_isValid;
}

QDateTime OAIGroup::getCreatedDateTime() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->created_date_time;
}
void OAIGroup::setCreatedDateTime(const QDateTime &created_date_time) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->created_date_time = created_date_time;
    d->created_date_time_isSet = true;
}

bool OAIGroup::is_created_date_time_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->created_date_time_isSet;
}

bool OAIGroup::is_created_date_time_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->created_date_time_isValid;
}

QString OAIGroup::getDescription() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->description;
}
void OAIGroup::setDescription(const QString &description) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->description = description;
    d->description_isSet = true;
}

bool OAIGroup::is_description_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->description_isSet;
}

bool OAIGroup::is_description_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->description_isValid;
}

QString OAIGroup::getDisplayName() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->display_name;
}
void OAIGroup::setDisplayName(const QString &display_name) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->display_name = display_name;
    d->display_name_isSet = true;
}

bool OAIGroup::is_display_name_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->display_name_isSet;
}

bool OAIGroup::is_display_name_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->display_name_isValid;
}

QDateTime OAIGroup::getExpirationDateTime() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->expiration_date_time;
}
void OAIGroup::setExpirationDateTime(const QDateTime &expiration_date_time) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->expiration_date_time = expiration_date_time;
    d->expiration_date_time_isSet = true;
}

bool OAIGroup::is_expiration_date_time_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->expiration_date_time_isSet;
}

bool OAIGroup::is_expiration_date_time_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->expiration_date_time_isValid;
}

QString OAIGroup::getMail() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->mail;
}
void OAIGroup::setMail(const QString &mail) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->mail = mail;
    d->mail_isSet = true;
}

bool OAIGroup::is_mail_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->mail_isSet;
}

bool OAIGroup::is_mail_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->mail_isValid;
}

QString OAIGroup::getOnPremisesDomainName() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->on_premises_domain_name;
}
void OAIGroup::setOnPremisesDomainName(const QString &on_premises_domain_name) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->on_premises_domain_name = on_premises_domain_name;
    d->on_premises_domain_name_isSet = true;
}

bool OAIGroup::is_on_premises_domain_name_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->on_premises_domain_name_isSet;
}

bool OAIGroup::is_on_premises_domain_name_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->on_premises_domain_name_isValid;
}

QDateTime OAIGroup::getOnPremisesLastSyncDateTime() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->on_premises_last_sync_date_time;
}
void OAIGroup::setOnPremisesLastSyncDateTime(const QDateTime &on_premises_last_sync_date_time) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->on_premises_last_sync_date_time = on_premises_last_sync_date_time;
    d->on_premises_last_sync_date_time_isSet = true;
}

bool OAIGroup::is_on_premises_last_sync_date_time_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->on_premises_last_sync_date_time_isSet;
}

bool OAIGroup::is_on_premises_last_sync_date_time_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->on_premises_last_sync_date_time_isValid;
}

QString OAIGroup::getOnPremisesSamAccountName() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->on_premises_sam_account_name;
}
void OAIGroup::setOnPremisesSamAccountName(const QString &on_premises_sam_account_name) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->on_premises_sam_account_name = on_premises_sam_account_name;
    d->on_premises_sam_account_name_isSet = true;
}

bool OAIGroup::is_on_premises_sam_account_name_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->on_premises_sam_account_name_isSet;
}

bool OAIGroup::is_on_premises_sam_account_name_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->on_premises_sam_account_name_isValid;
}

bool OAIGroup::isOnPremisesSyncEnabled() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->on_premises_sync_enabled;
}
void OAIGroup::setOnPremisesSyncEnabled(const bool &on_premises_sync_enabled) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->on_premises_sync_enabled = on_premises_sync_enabled;
    d->on_premises_sync_enabled_isSet = true;
}

bool OAIGroup::is_on_premises_sync_enabled_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->on_premises_sync_enabled_isSet;
}

bool OAIGroup::is_on_premises_sync_enabled_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->on_premises_sync_enabled_isValid;
}

QString OAIGroup::getPreferredLanguage() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->preferred_language;
}
void OAIGroup::setPreferredLanguage(const QString &preferred_language) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->preferred_language = preferred_language;
    d->preferred_language_isSet = true;
}

bool OAIGroup::is_preferred_language_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->preferred_language_isSet;
}

bool OAIGroup::is_preferred_language_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->preferred_language_isValid;
}

bool OAIGroup::isSecurityEnabled() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->security_enabled;
}
void OAIGroup::setSecurityEnabled(const bool &security_enabled) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->security_enabled = security_enabled;
    d->security_enabled_isSet = true;
}

bool OAIGroup::is_security_enabled_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->security_enabled_isSet;
}

bool OAIGroup::is_security_enabled_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->security_enabled_isValid;
}

QString OAIGroup::getSecurityIdentifier() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->security_identifier;
}
void OAIGroup::setSecurityIdentifier(const QString &security_identifier) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->security_identifier = security_identifier;
    d->security_identifier_isSet = true;
}

bool OAIGroup::is_security_identifier_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->security_identifier_isSet;
}

bool OAIGroup::is_security_identifier_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->security_identifier_isValid;
}

QString OAIGroup::getVisibility() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->visibility;
}
void OAIGroup::setVisibility(const QString &visibility) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->visibility = visibility;
    d->visibility_isSet = true;
}

bool OAIGroup::is_visibility_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->visibility_isSet;
}

bool OAIGroup::is_visibility_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->visibility_isValid;
}

OAIDirectoryObject OAIGroup::getCreatedOnBehalfOf() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->created_on_behalf_of;
}
void OAIGroup::setCreatedOnBehalfOf(const OAIDirectoryObject &created_on_behalf_of) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->created_on_behalf_of = created_on_behalf_of;
    d->created_on_behalf_of_isSet = true;
}

bool OAIGroup::is_created_on_behalf_of_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->created_on_behalf_of_isSet;
}

bool OAIGroup::is_created_on_behalf_of_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->created_on_behalf_of_isValid;
}

QList<OAIDirectoryObject> OAIGroup::getMemberOf() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->member_of;
}
void OAIGroup::setMemberOf(const QList<OAIDirectoryObject> &member_of) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->member_of = member_of;
    d->member_of_isSet = true;
}

bool OAIGroup::is_member_of_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->member_of_isSet;
}

bool OAIGroup::is_member_of_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->member_of_isValid;
}

QList<OAIDirectoryObject> OAIGroup::getMembers() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->members;
}
void OAIGroup::setMembers(const QList<OAIDirectoryObject> &members) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->members = members;
    d->members_isSet = true;
}

bool OAIGroup::is_members_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->members_isSet;
}

bool OAIGroup::is_members_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->members_isValid;
}

QList<OAIDirectoryObject> OAIGroup::getOwners() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->owners;
}
void OAIGroup::setOwners(const QList<OAIDirectoryObject> &owners) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->owners = owners;
    d->owners_isSet = true;
}

bool OAIGroup::is_owners_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->owners_isSet;
}

bool OAIGroup::is_owners_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->owners_isValid;
}

OAIDrive OAIGroup::getDrive() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->drive;
}
void OAIGroup::setDrive(const OAIDrive &drive) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->drive = drive;
    d->drive_isSet = true;
}

bool OAIGroup::is_drive_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->drive_isSet;
}

bool OAIGroup::is_drive_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->drive_isValid;
}

QList<OAIDrive> OAIGroup::getDrives() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->drives;
}
void OAIGroup::setDrives(const QList<OAIDrive> &drives) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->drives = drives;
    d->drives_isSet = true;
}

bool OAIGroup::is_drives_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->drives_isSet;
}

bool OAIGroup::is_drives_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->drives_isValid;
}

bool OAIGroup::isIsArchived() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->is_archived;
}
void OAIGroup::setIsArchived(const bool &is_archived) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->is_archived = is_archived;
    d->is_archived_isSet = true;
}

bool OAIGroup::is_is_archived_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->is_archived_isSet;
}

bool OAIGroup::is_is_archived_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->is_archived_isValid;
}

QSet<QString> OAIGroup::getMembersodataBind() const {
    Q_D(const OAIGroup);
    if(!d){
        return {};
    }
    return d->membersodata_bind;
}
void OAIGroup::setMembersodataBind(const QSet<QString> &membersodata_bind) {
    Q_D(OAIGroup);
    Q_ASSERT(d);

    d->membersodata_bind = membersodata_bind;
    d->membersodata_bind_isSet = true;
}

bool OAIGroup::is_membersodata_bind_Set() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }

    return d->membersodata_bind_isSet;
}

bool OAIGroup::is_membersodata_bind_Valid() const{
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    return d->membersodata_bind_isValid;
}

bool OAIGroup::isSet() const {
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->deleted_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->expiration_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->mail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_last_sync_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_sam_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->on_premises_sync_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->preferred_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->security_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->security_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->visibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->created_on_behalf_of.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->member_of.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->drive.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->drives.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->membersodata_bind.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    Q_D(const OAIGroup);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
