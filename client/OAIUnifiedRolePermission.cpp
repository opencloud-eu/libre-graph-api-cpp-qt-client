// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnifiedRolePermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIUnifiedRolePermissionPrivate {
    friend class OAIUnifiedRolePermission;

     QList<QString> allowed_resource_actions;
     bool allowed_resource_actions_isSet;
     bool allowed_resource_actions_isValid;

     QString condition;
     bool condition_isSet;
     bool condition_isValid;
};

OAIUnifiedRolePermission::OAIUnifiedRolePermission()
    : d_ptr()
{
}

OAIUnifiedRolePermission::OAIUnifiedRolePermission(const OAIUnifiedRolePermission& other)
    : d_ptr(other.d_ptr)
{
}

OAIUnifiedRolePermission::OAIUnifiedRolePermission(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIUnifiedRolePermission::~OAIUnifiedRolePermission() = default;

void OAIUnifiedRolePermission::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIUnifiedRolePermissionPrivate{});

        Q_D(OAIUnifiedRolePermission);


        d->allowed_resource_actions_isSet = false;
        d->allowed_resource_actions_isValid = false;

        d->condition_isSet = false;
        d->condition_isValid = false;
    }
}

void OAIUnifiedRolePermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnifiedRolePermission::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIUnifiedRolePermission);

    d->allowed_resource_actions_isValid = ::OpenAPI::fromJsonValue(d->allowed_resource_actions, json[QString("allowedResourceActions")]);
    d->allowed_resource_actions_isSet = !json[QString("allowedResourceActions")].isNull() && d->allowed_resource_actions_isValid;

    d->condition_isValid = ::OpenAPI::fromJsonValue(d->condition, json[QString("condition")]);
    d->condition_isSet = !json[QString("condition")].isNull() && d->condition_isValid;
}

QString OAIUnifiedRolePermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnifiedRolePermission::asJsonObject() const {
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->allowed_resource_actions.size() > 0) {
        obj.insert(QString("allowedResourceActions"), ::OpenAPI::toJsonValue(d->allowed_resource_actions));
    }
    if (d->condition_isSet) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(d->condition));
    }
    return obj;
}

QList<QString> OAIUnifiedRolePermission::getAllowedResourceActions() const {
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return {};
    }
    return d->allowed_resource_actions;
}
void OAIUnifiedRolePermission::setAllowedResourceActions(const QList<QString> &allowed_resource_actions) {
    Q_D(OAIUnifiedRolePermission);
    Q_ASSERT(d);

    d->allowed_resource_actions = allowed_resource_actions;
    d->allowed_resource_actions_isSet = true;
}

bool OAIUnifiedRolePermission::is_allowed_resource_actions_Set() const{
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return false;
    }

    return d->allowed_resource_actions_isSet;
}

bool OAIUnifiedRolePermission::is_allowed_resource_actions_Valid() const{
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return false;
    }
    return d->allowed_resource_actions_isValid;
}

QString OAIUnifiedRolePermission::getCondition() const {
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return {};
    }
    return d->condition;
}
void OAIUnifiedRolePermission::setCondition(const QString &condition) {
    Q_D(OAIUnifiedRolePermission);
    Q_ASSERT(d);

    d->condition = condition;
    d->condition_isSet = true;
}

bool OAIUnifiedRolePermission::is_condition_Set() const{
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return false;
    }

    return d->condition_isSet;
}

bool OAIUnifiedRolePermission::is_condition_Valid() const{
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return false;
    }
    return d->condition_isValid;
}

bool OAIUnifiedRolePermission::isSet() const {
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->allowed_resource_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (d->condition_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnifiedRolePermission::isValid() const {
    Q_D(const OAIUnifiedRolePermission);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
