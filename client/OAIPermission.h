// model-header.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPermission.h
 *
 * The Permission resource provides information about a sharing permission granted for a DriveItem resource.  ### Remarks  The Permission resource uses *facets* to provide information about the kind of permission represented by the resource.  Permissions with a &#x60;link&#x60; facet represent sharing links created on the item. Sharing links contain a unique token that provides access to the item for anyone with the link.  Permissions with a &#x60;invitation&#x60; facet represent permissions added by inviting specific users or groups to have access to the file. 
 */

#ifndef OAIPermission_H
#define OAIPermission_H

#include <QJsonObject>

#include "OAIIdentitySet.h"
#include "OAISharePointIdentitySet.h"
#include "OAISharingInvitation.h"
#include "OAISharingLink.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISharePointIdentitySet;
class OAISharingLink;
class OAIIdentitySet;
class OAISharingInvitation;


class OAIPermissionPrivate;

class OAIPermission : public OAIObject {
public:
    OAIPermission();
    OAIPermission(const OAIPermission &other);
    OAIPermission(QString json);
    ~OAIPermission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isHasPassword() const;
    void setHasPassword(const bool &has_password);
    bool is_has_password_Set() const;
    bool is_has_password_Valid() const;

    QDateTime getExpirationDateTime() const;
    void setExpirationDateTime(const QDateTime &expiration_date_time);
    bool is_expiration_date_time_Set() const;
    bool is_expiration_date_time_Valid() const;

    QDateTime getCreatedDateTime() const;
    void setCreatedDateTime(const QDateTime &created_date_time);
    bool is_created_date_time_Set() const;
    bool is_created_date_time_Valid() const;

    OAISharePointIdentitySet getGrantedToV2() const;
    void setGrantedToV2(const OAISharePointIdentitySet &granted_to_v2);
    bool is_granted_to_v2_Set() const;
    bool is_granted_to_v2_Valid() const;

    OAISharingLink getLink() const;
    void setLink(const OAISharingLink &link);
    bool is_link_Set() const;
    bool is_link_Valid() const;

    QList<QString> getRoles() const;
    void setRoles(const QList<QString> &roles);
    bool is_roles_Set() const;
    bool is_roles_Valid() const;

    Q_DECL_DEPRECATED QList<OAIIdentitySet> getGrantedToIdentities() const;
    Q_DECL_DEPRECATED void setGrantedToIdentities(const QList<OAIIdentitySet> &granted_to_identities);
    Q_DECL_DEPRECATED bool is_granted_to_identities_Set() const;
    Q_DECL_DEPRECATED bool is_granted_to_identities_Valid() const;

    QList<QString> getLibreGraphPermissionsActions() const;
    void setLibreGraphPermissionsActions(const QList<QString> &libre_graph_permissions_actions);
    bool is_libre_graph_permissions_actions_Set() const;
    bool is_libre_graph_permissions_actions_Valid() const;

    OAISharingInvitation getInvitation() const;
    void setInvitation(const OAISharingInvitation &invitation);
    bool is_invitation_Set() const;
    bool is_invitation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();
    Q_DECLARE_PRIVATE(OAIPermission)
    QSharedPointer<OAIPermissionPrivate> d_ptr;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPermission)

#endif // OAIPermission_H
