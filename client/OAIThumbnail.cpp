// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThumbnail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIThumbnailPrivate {
    friend class OAIThumbnail;

     QString content;
     bool content_isSet;
     bool content_isValid;

     qint32 height;
     bool height_isSet;
     bool height_isValid;

     QString source_item_id;
     bool source_item_id_isSet;
     bool source_item_id_isValid;

     QString url;
     bool url_isSet;
     bool url_isValid;

     qint32 width;
     bool width_isSet;
     bool width_isValid;
};

OAIThumbnail::OAIThumbnail()
    : d_ptr()
{
}

OAIThumbnail::OAIThumbnail(const OAIThumbnail& other)
    : d_ptr(other.d_ptr)
{
}

OAIThumbnail::OAIThumbnail(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIThumbnail::~OAIThumbnail() = default;

void OAIThumbnail::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIThumbnailPrivate{});

        Q_D(OAIThumbnail);


        d->content_isSet = false;
        d->content_isValid = false;

        d->height_isSet = false;
        d->height_isValid = false;

        d->source_item_id_isSet = false;
        d->source_item_id_isValid = false;

        d->url_isSet = false;
        d->url_isValid = false;

        d->width_isSet = false;
        d->width_isValid = false;
    }
}

void OAIThumbnail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThumbnail::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIThumbnail);

    d->content_isValid = ::OpenAPI::fromJsonValue(d->content, json[QString("content")]);
    d->content_isSet = !json[QString("content")].isNull() && d->content_isValid;

    d->height_isValid = ::OpenAPI::fromJsonValue(d->height, json[QString("height")]);
    d->height_isSet = !json[QString("height")].isNull() && d->height_isValid;

    d->source_item_id_isValid = ::OpenAPI::fromJsonValue(d->source_item_id, json[QString("sourceItemId")]);
    d->source_item_id_isSet = !json[QString("sourceItemId")].isNull() && d->source_item_id_isValid;

    d->url_isValid = ::OpenAPI::fromJsonValue(d->url, json[QString("url")]);
    d->url_isSet = !json[QString("url")].isNull() && d->url_isValid;

    d->width_isValid = ::OpenAPI::fromJsonValue(d->width, json[QString("width")]);
    d->width_isSet = !json[QString("width")].isNull() && d->width_isValid;
}

QString OAIThumbnail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThumbnail::asJsonObject() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(d->content));
    }
    if (d->height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(d->height));
    }
    if (d->source_item_id_isSet) {
        obj.insert(QString("sourceItemId"), ::OpenAPI::toJsonValue(d->source_item_id));
    }
    if (d->url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(d->url));
    }
    if (d->width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(d->width));
    }
    return obj;
}

QString OAIThumbnail::getContent() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return {};
    }
    return d->content;
}
void OAIThumbnail::setContent(const QString &content) {
    Q_D(OAIThumbnail);
    Q_ASSERT(d);

    d->content = content;
    d->content_isSet = true;
}

bool OAIThumbnail::is_content_Set() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }

    return d->content_isSet;
}

bool OAIThumbnail::is_content_Valid() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    return d->content_isValid;
}

qint32 OAIThumbnail::getHeight() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return {};
    }
    return d->height;
}
void OAIThumbnail::setHeight(const qint32 &height) {
    Q_D(OAIThumbnail);
    Q_ASSERT(d);

    d->height = height;
    d->height_isSet = true;
}

bool OAIThumbnail::is_height_Set() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }

    return d->height_isSet;
}

bool OAIThumbnail::is_height_Valid() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    return d->height_isValid;
}

QString OAIThumbnail::getSourceItemId() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return {};
    }
    return d->source_item_id;
}
void OAIThumbnail::setSourceItemId(const QString &source_item_id) {
    Q_D(OAIThumbnail);
    Q_ASSERT(d);

    d->source_item_id = source_item_id;
    d->source_item_id_isSet = true;
}

bool OAIThumbnail::is_source_item_id_Set() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }

    return d->source_item_id_isSet;
}

bool OAIThumbnail::is_source_item_id_Valid() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    return d->source_item_id_isValid;
}

QString OAIThumbnail::getUrl() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return {};
    }
    return d->url;
}
void OAIThumbnail::setUrl(const QString &url) {
    Q_D(OAIThumbnail);
    Q_ASSERT(d);

    d->url = url;
    d->url_isSet = true;
}

bool OAIThumbnail::is_url_Set() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }

    return d->url_isSet;
}

bool OAIThumbnail::is_url_Valid() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    return d->url_isValid;
}

qint32 OAIThumbnail::getWidth() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return {};
    }
    return d->width;
}
void OAIThumbnail::setWidth(const qint32 &width) {
    Q_D(OAIThumbnail);
    Q_ASSERT(d);

    d->width = width;
    d->width_isSet = true;
}

bool OAIThumbnail::is_width_Set() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }

    return d->width_isSet;
}

bool OAIThumbnail::is_width_Valid() const{
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    return d->width_isValid;
}

bool OAIThumbnail::isSet() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->source_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThumbnail::isValid() const {
    Q_D(const OAIThumbnail);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
