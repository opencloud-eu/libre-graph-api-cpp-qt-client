/**
 * Libre Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemReference::OAIItemReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemReference::OAIItemReference() {
    this->initializeModel();
}

OAIItemReference::~OAIItemReference() {}

void OAIItemReference::initializeModel() {

    m_drive_id_isSet = false;
    m_drive_id_isValid = false;

    m_drive_type_isSet = false;
    m_drive_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_share_id_isSet = false;
    m_share_id_isValid = false;
}

void OAIItemReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemReference::fromJsonObject(QJsonObject json) {

    m_drive_id_isValid = ::OpenAPI::fromJsonValue(drive_id, json[QString("driveId")]);
    m_drive_id_isSet = !json[QString("driveId")].isNull() && m_drive_id_isValid;

    m_drive_type_isValid = ::OpenAPI::fromJsonValue(drive_type, json[QString("driveType")]);
    m_drive_type_isSet = !json[QString("driveType")].isNull() && m_drive_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_share_id_isValid = ::OpenAPI::fromJsonValue(share_id, json[QString("shareId")]);
    m_share_id_isSet = !json[QString("shareId")].isNull() && m_share_id_isValid;
}

QString OAIItemReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemReference::asJsonObject() const {
    QJsonObject obj;
    if (m_drive_id_isSet) {
        obj.insert(QString("driveId"), ::OpenAPI::toJsonValue(drive_id));
    }
    if (m_drive_type_isSet) {
        obj.insert(QString("driveType"), ::OpenAPI::toJsonValue(drive_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(path));
    }
    if (m_share_id_isSet) {
        obj.insert(QString("shareId"), ::OpenAPI::toJsonValue(share_id));
    }
    return obj;
}

QString OAIItemReference::getDriveId() const {
    return drive_id;
}
void OAIItemReference::setDriveId(const QString &drive_id) {
    this->drive_id = drive_id;
    this->m_drive_id_isSet = true;
}

bool OAIItemReference::is_drive_id_Set() const{
    return m_drive_id_isSet;
}

bool OAIItemReference::is_drive_id_Valid() const{
    return m_drive_id_isValid;
}

QString OAIItemReference::getDriveType() const {
    return drive_type;
}
void OAIItemReference::setDriveType(const QString &drive_type) {
    this->drive_type = drive_type;
    this->m_drive_type_isSet = true;
}

bool OAIItemReference::is_drive_type_Set() const{
    return m_drive_type_isSet;
}

bool OAIItemReference::is_drive_type_Valid() const{
    return m_drive_type_isValid;
}

QString OAIItemReference::getId() const {
    return id;
}
void OAIItemReference::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIItemReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItemReference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIItemReference::getName() const {
    return name;
}
void OAIItemReference::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIItemReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIItemReference::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIItemReference::getPath() const {
    return path;
}
void OAIItemReference::setPath(const QString &path) {
    this->path = path;
    this->m_path_isSet = true;
}

bool OAIItemReference::is_path_Set() const{
    return m_path_isSet;
}

bool OAIItemReference::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIItemReference::getShareId() const {
    return share_id;
}
void OAIItemReference::setShareId(const QString &share_id) {
    this->share_id = share_id;
    this->m_share_id_isSet = true;
}

bool OAIItemReference::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAIItemReference::is_share_id_Valid() const{
    return m_share_id_isValid;
}

bool OAIItemReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drive_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drive_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
