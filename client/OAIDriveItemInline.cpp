/**
 * Open Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriveItemInline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDriveItemInline::OAIDriveItemInline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDriveItemInline::OAIDriveItemInline() {
    this->initializeModel();
}

OAIDriveItemInline::~OAIDriveItemInline() {}

void OAIDriveItemInline::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_c_tag_isSet = false;
    m_c_tag_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_file_system_info_isSet = false;
    m_file_system_info_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_root_isSet = false;
    m_root_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_web_dav_url_isSet = false;
    m_web_dav_url_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;
}

void OAIDriveItemInline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriveItemInline::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_c_tag_isValid = ::OpenAPI::fromJsonValue(c_tag, json[QString("cTag")]);
    m_c_tag_isSet = !json[QString("cTag")].isNull() && m_c_tag_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_file_system_info_isValid = ::OpenAPI::fromJsonValue(file_system_info, json[QString("fileSystemInfo")]);
    m_file_system_info_isSet = !json[QString("fileSystemInfo")].isNull() && m_file_system_info_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_root_isValid = ::OpenAPI::fromJsonValue(root, json[QString("root")]);
    m_root_isSet = !json[QString("root")].isNull() && m_root_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_web_dav_url_isValid = ::OpenAPI::fromJsonValue(web_dav_url, json[QString("webDavUrl")]);
    m_web_dav_url_isSet = !json[QString("webDavUrl")].isNull() && m_web_dav_url_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;
}

QString OAIDriveItemInline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDriveItemInline::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(content));
    }
    if (m_c_tag_isSet) {
        obj.insert(QString("cTag"), ::OpenAPI::toJsonValue(c_tag));
    }
    if (deleted.isSet()) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(deleted));
    }
    if (file.isSet()) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(file));
    }
    if (file_system_info.isSet()) {
        obj.insert(QString("fileSystemInfo"), ::OpenAPI::toJsonValue(file_system_info));
    }
    if (folder.isSet()) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(folder));
    }
    if (image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(image));
    }
    if (m_root_isSet) {
        obj.insert(QString("root"), ::OpenAPI::toJsonValue(root));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(size));
    }
    if (m_web_dav_url_isSet) {
        obj.insert(QString("webDavUrl"), ::OpenAPI::toJsonValue(web_dav_url));
    }
    if (children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(children));
    }
    return obj;
}

QString OAIDriveItemInline::getContent() const {
    return content;
}
void OAIDriveItemInline::setContent(const QString &content) {
    this->content = content;
    this->m_content_isSet = true;
}

bool OAIDriveItemInline::is_content_Set() const{
    return m_content_isSet;
}

bool OAIDriveItemInline::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIDriveItemInline::getCTag() const {
    return c_tag;
}
void OAIDriveItemInline::setCTag(const QString &c_tag) {
    this->c_tag = c_tag;
    this->m_c_tag_isSet = true;
}

bool OAIDriveItemInline::is_c_tag_Set() const{
    return m_c_tag_isSet;
}

bool OAIDriveItemInline::is_c_tag_Valid() const{
    return m_c_tag_isValid;
}

OAIDeleted OAIDriveItemInline::getDeleted() const {
    return deleted;
}
void OAIDriveItemInline::setDeleted(const OAIDeleted &deleted) {
    this->deleted = deleted;
    this->m_deleted_isSet = true;
}

bool OAIDriveItemInline::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIDriveItemInline::is_deleted_Valid() const{
    return m_deleted_isValid;
}

OAIOpenGraphFile OAIDriveItemInline::getFile() const {
    return file;
}
void OAIDriveItemInline::setFile(const OAIOpenGraphFile &file) {
    this->file = file;
    this->m_file_isSet = true;
}

bool OAIDriveItemInline::is_file_Set() const{
    return m_file_isSet;
}

bool OAIDriveItemInline::is_file_Valid() const{
    return m_file_isValid;
}

OAIFileSystemInfo OAIDriveItemInline::getFileSystemInfo() const {
    return file_system_info;
}
void OAIDriveItemInline::setFileSystemInfo(const OAIFileSystemInfo &file_system_info) {
    this->file_system_info = file_system_info;
    this->m_file_system_info_isSet = true;
}

bool OAIDriveItemInline::is_file_system_info_Set() const{
    return m_file_system_info_isSet;
}

bool OAIDriveItemInline::is_file_system_info_Valid() const{
    return m_file_system_info_isValid;
}

OAIFolder OAIDriveItemInline::getFolder() const {
    return folder;
}
void OAIDriveItemInline::setFolder(const OAIFolder &folder) {
    this->folder = folder;
    this->m_folder_isSet = true;
}

bool OAIDriveItemInline::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIDriveItemInline::is_folder_Valid() const{
    return m_folder_isValid;
}

OAIImage OAIDriveItemInline::getImage() const {
    return image;
}
void OAIDriveItemInline::setImage(const OAIImage &image) {
    this->image = image;
    this->m_image_isSet = true;
}

bool OAIDriveItemInline::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDriveItemInline::is_image_Valid() const{
    return m_image_isValid;
}

OAIObject OAIDriveItemInline::getRoot() const {
    return root;
}
void OAIDriveItemInline::setRoot(const OAIObject &root) {
    this->root = root;
    this->m_root_isSet = true;
}

bool OAIDriveItemInline::is_root_Set() const{
    return m_root_isSet;
}

bool OAIDriveItemInline::is_root_Valid() const{
    return m_root_isValid;
}

qint64 OAIDriveItemInline::getSize() const {
    return size;
}
void OAIDriveItemInline::setSize(const qint64 &size) {
    this->size = size;
    this->m_size_isSet = true;
}

bool OAIDriveItemInline::is_size_Set() const{
    return m_size_isSet;
}

bool OAIDriveItemInline::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIDriveItemInline::getWebDavUrl() const {
    return web_dav_url;
}
void OAIDriveItemInline::setWebDavUrl(const QString &web_dav_url) {
    this->web_dav_url = web_dav_url;
    this->m_web_dav_url_isSet = true;
}

bool OAIDriveItemInline::is_web_dav_url_Set() const{
    return m_web_dav_url_isSet;
}

bool OAIDriveItemInline::is_web_dav_url_Valid() const{
    return m_web_dav_url_isValid;
}

QList<OAIDriveItem> OAIDriveItemInline::getChildren() const {
    return children;
}
void OAIDriveItemInline::setChildren(const QList<OAIDriveItem> &children) {
    this->children = children;
    this->m_children_isSet = true;
}

bool OAIDriveItemInline::is_children_Set() const{
    return m_children_isSet;
}

bool OAIDriveItemInline::is_children_Valid() const{
    return m_children_isValid;
}

bool OAIDriveItemInline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_c_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (deleted.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (file_system_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (folder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_dav_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (children.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriveItemInline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
