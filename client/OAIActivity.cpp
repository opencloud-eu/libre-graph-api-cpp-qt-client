// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAIActivityPrivate {
    friend class OAIActivity;

     QString id;
     bool id_isSet;
     bool id_isValid;

     OAIActivity_times times;
     bool times_isSet;
     bool times_isValid;

     OAIActivity_template r_template;
     bool r_template_isSet;
     bool r_template_isValid;
};

OAIActivity::OAIActivity()
    : d_ptr()
{
}

OAIActivity::OAIActivity(const OAIActivity& other)
    : d_ptr(other.d_ptr)
{
}

OAIActivity::OAIActivity(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAIActivity::~OAIActivity() = default;

void OAIActivity::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAIActivityPrivate{});

        Q_D(OAIActivity);


        d->id_isSet = false;
        d->id_isValid = false;

        d->times_isSet = false;
        d->times_isValid = false;

        d->r_template_isSet = false;
        d->r_template_isValid = false;
    }
}

void OAIActivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toUtf8());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivity::fromJsonObject(QJsonObject json) {
    initializeModel();

    Q_D(OAIActivity);

    d->id_isValid = ::OpenAPI::fromJsonValue(d->id, json[QString("id")]);
    d->id_isSet = !json[QString("id")].isNull() && d->id_isValid;

    d->times_isValid = ::OpenAPI::fromJsonValue(d->times, json[QString("times")]);
    d->times_isSet = !json[QString("times")].isNull() && d->times_isValid;

    d->r_template_isValid = ::OpenAPI::fromJsonValue(d->r_template, json[QString("template")]);
    d->r_template_isSet = !json[QString("template")].isNull() && d->r_template_isValid;
}

QString OAIActivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivity::asJsonObject() const {
    Q_D(const OAIActivity);
    if(!d){
        return {};
    }
    QJsonObject obj;
    if (d->id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(d->id));
    }
    if (d->times.isSet()) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(d->times));
    }
    if (d->r_template.isSet()) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(d->r_template));
    }
    return obj;
}

QString OAIActivity::getId() const {
    Q_D(const OAIActivity);
    if(!d){
        return {};
    }
    return d->id;
}
void OAIActivity::setId(const QString &id) {
    Q_D(OAIActivity);
    Q_ASSERT(d);

    d->id = id;
    d->id_isSet = true;
}

bool OAIActivity::is_id_Set() const{
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }

    return d->id_isSet;
}

bool OAIActivity::is_id_Valid() const{
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }
    return d->id_isValid;
}

OAIActivity_times OAIActivity::getTimes() const {
    Q_D(const OAIActivity);
    if(!d){
        return {};
    }
    return d->times;
}
void OAIActivity::setTimes(const OAIActivity_times &times) {
    Q_D(OAIActivity);
    Q_ASSERT(d);

    d->times = times;
    d->times_isSet = true;
}

bool OAIActivity::is_times_Set() const{
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }

    return d->times_isSet;
}

bool OAIActivity::is_times_Valid() const{
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }
    return d->times_isValid;
}

OAIActivity_template OAIActivity::getRTemplate() const {
    Q_D(const OAIActivity);
    if(!d){
        return {};
    }
    return d->r_template;
}
void OAIActivity::setRTemplate(const OAIActivity_template &r_template) {
    Q_D(OAIActivity);
    Q_ASSERT(d);

    d->r_template = r_template;
    d->r_template_isSet = true;
}

bool OAIActivity::is_r_template_Set() const{
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }

    return d->r_template_isSet;
}

bool OAIActivity::is_r_template_Valid() const{
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }
    return d->r_template_isValid;
}

bool OAIActivity::isSet() const {
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }
    bool isObjectUpdated = false;
    do {
        if (d->id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (d->times.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (d->r_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivity::isValid() const {
    Q_D(const OAIActivity);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return d->id_isValid && d->times_isValid && d->r_template_isValid && true;
}

} // namespace OpenAPI
