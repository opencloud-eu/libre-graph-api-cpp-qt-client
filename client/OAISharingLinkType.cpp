// model-body.mustache

// licenseInfo.mustache

/**
 * Libre Graph API
 * Libre Graph is a free API for cloud collaboration inspired by the MS Graph API.
 *
 * The version of the OpenAPI document: v1.0.4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharingLinkType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

class OAISharingLinkTypePrivate {
    friend class OAISharingLinkType;

     OAISharingLinkType::eOAISharingLinkType value;
     bool value_isSet;
     bool value_isValid;
};

OAISharingLinkType::OAISharingLinkType()
    : d_ptr()
{
}

OAISharingLinkType::OAISharingLinkType(const OAISharingLinkType& other)
    : d_ptr(other.d_ptr)
{
}

OAISharingLinkType::OAISharingLinkType(QString json)
    : d_ptr(nullptr)
{
    this->fromJson(json);
}

OAISharingLinkType::~OAISharingLinkType() = default;

void OAISharingLinkType::initializeModel() {
    if (d_ptr == nullptr) {
        d_ptr.reset(new OAISharingLinkTypePrivate{});

        Q_D(OAISharingLinkType);


        d->value_isSet = false;
        d->value_isValid = false;
        d->value = eOAISharingLinkType::INVALID_VALUE_OPENAPI_GENERATED;
    }
}

void OAISharingLinkType::fromJson(QString jsonString) {
    Q_D(OAISharingLinkType);
    
    if ( jsonString.compare("internal", Qt::CaseInsensitive) == 0) {
        d->value = eOAISharingLinkType::INTERNAL;
        d->value_isSet = d->value_isValid = true;
    }
    else if ( jsonString.compare("view", Qt::CaseInsensitive) == 0) {
        d->value = eOAISharingLinkType::VIEW;
        d->value_isSet = d->value_isValid = true;
    }
    else if ( jsonString.compare("upload", Qt::CaseInsensitive) == 0) {
        d->value = eOAISharingLinkType::UPLOAD;
        d->value_isSet = d->value_isValid = true;
    }
    else if ( jsonString.compare("edit", Qt::CaseInsensitive) == 0) {
        d->value = eOAISharingLinkType::EDIT;
        d->value_isSet = d->value_isValid = true;
    }
    else if ( jsonString.compare("createOnly", Qt::CaseInsensitive) == 0) {
        d->value = eOAISharingLinkType::CREATEONLY;
        d->value_isSet = d->value_isValid = true;
    }
    else if ( jsonString.compare("blocksDownload", Qt::CaseInsensitive) == 0) {
        d->value = eOAISharingLinkType::BLOCKSDOWNLOAD;
        d->value_isSet = d->value_isValid = true;
    }
}

void OAISharingLinkType::fromJsonValue(QJsonValue json) {
    initializeModel();

    Q_D(OAISharingLinkType);
fromJson(json.toString());
}

QString OAISharingLinkType::asJson() const {
    Q_D(const OAISharingLinkType);
    QString val;
    switch (d->value){
        case eOAISharingLinkType::INTERNAL:
            val = "internal";
            break;
        case eOAISharingLinkType::VIEW:
            val = "view";
            break;
        case eOAISharingLinkType::UPLOAD:
            val = "upload";
            break;
        case eOAISharingLinkType::EDIT:
            val = "edit";
            break;
        case eOAISharingLinkType::CREATEONLY:
            val = "createOnly";
            break;
        case eOAISharingLinkType::BLOCKSDOWNLOAD:
            val = "blocksDownload";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISharingLinkType::asJsonValue() const {
    Q_D(const OAISharingLinkType);
    if(!d){
        return {};
    }
    
    return QJsonValue(asJson());
}


OAISharingLinkType::eOAISharingLinkType OAISharingLinkType::getValue() const {
    Q_D(const OAISharingLinkType);
    if(!d){
        return {};
    }
    return d->value;
}

void OAISharingLinkType::setValue(const OAISharingLinkType::eOAISharingLinkType& value){
    Q_D(OAISharingLinkType);
    Q_ASSERT(d);

    d->value = value;
    d->value_isSet = true;
}
bool OAISharingLinkType::isSet() const {
    Q_D(const OAISharingLinkType);
    if(!d){
        return false;
    }
    
    return d->value_isSet;
}

bool OAISharingLinkType::isValid() const {
    Q_D(const OAISharingLinkType);
    if(!d){
        return false;
    }
    // only required properties are required for the object to be considered valid
    return d->value_isValid;
}

} // namespace OpenAPI
