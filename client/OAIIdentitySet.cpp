/**
 * Libre Graph API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0.8.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentitySet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentitySet::OAIIdentitySet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentitySet::OAIIdentitySet() {
    this->initializeModel();
}

OAIIdentitySet::~OAIIdentitySet() {}

void OAIIdentitySet::initializeModel() {

    m_application_isSet = false;
    m_application_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIIdentitySet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentitySet::fromJsonObject(QJsonObject json) {

    m_application_isValid = ::OpenAPI::fromJsonValue(application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIIdentitySet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentitySet::asJsonObject() const {
    QJsonObject obj;
    if (application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(application));
    }
    if (device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(device));
    }
    if (user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(user));
    }
    return obj;
}

OAIIdentity OAIIdentitySet::getApplication() const {
    return application;
}
void OAIIdentitySet::setApplication(const OAIIdentity &application) {
    this->application = application;
    this->m_application_isSet = true;
}

bool OAIIdentitySet::is_application_Set() const{
    return m_application_isSet;
}

bool OAIIdentitySet::is_application_Valid() const{
    return m_application_isValid;
}

OAIIdentity OAIIdentitySet::getDevice() const {
    return device;
}
void OAIIdentitySet::setDevice(const OAIIdentity &device) {
    this->device = device;
    this->m_device_isSet = true;
}

bool OAIIdentitySet::is_device_Set() const{
    return m_device_isSet;
}

bool OAIIdentitySet::is_device_Valid() const{
    return m_device_isValid;
}

OAIIdentity OAIIdentitySet::getUser() const {
    return user;
}
void OAIIdentitySet::setUser(const OAIIdentity &user) {
    this->user = user;
    this->m_user_isSet = true;
}

bool OAIIdentitySet::is_user_Set() const{
    return m_user_isSet;
}

bool OAIIdentitySet::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIIdentitySet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentitySet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
